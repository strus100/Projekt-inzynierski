Index: database/DatabaseConnection.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\trequire_once(\"DatabaseCreate.php\");\r\n\trequire_once __DIR__.\"/../Config.php\";\r\n\r\n\t\r\n\tclass DatabaseConnection {\r\n\t\tpublic $conn = null;\r\n\t\t\r\n\t\tfunction connect(){\r\n\t\t\t// Create connection\r\n\t\t\t$this->conn = new mysqli( \r\n\t\t\tConfig::DB_SERVER_NAME,\r\n\t\t\tConfig::DB_USERNAME,\r\n\t\t\tConfig::DB_PASSWORD,\r\n\t\t\tConfig::DB_NAME\r\n\t\t\t);\r\n\t\t\t$this->conn->set_charset(\"UTF8\");\r\n\t\t\t$this->conn->query(\"SET NAMES UTF8\");\r\n\r\n\t\t\t// Check connection\r\n\t\t\tif ($this->conn->connect_error) {\r\n\t\t\t\tdie(\"Connection failed: \" . $this->conn->connect_error);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction get_name() {\r\n\t\t\treturn $this->name;\r\n\t\t}\r\n\t\r\n\t\tfunction insertData($table,$data,$colNames){\r\n\t\t\t$colNamesS = implode(', ', $colNames);\r\n\t\t\t\r\n\t\t\t$dataS = implode(', ', $data);\r\n\t\t\t$dataS = str_replace(\",\",\"\\\",\\\"\",$dataS);\r\n\t\t\t$dataS =  str_replace(\" \",\"\",$dataS);\r\n\t\t\t\r\n\t\t\t$sql = \"INSERT INTO $table ($colNamesS) VALUES (\\\"$dataS\\\")\";\r\n\t\t\t\r\n\t\t\tif ($this->conn->query($sql) === TRUE) {\r\n\t\t\t\techo \"Row added to $table successfully!<br>\";\r\n\t\t\t} else {\r\n\t\t\t\techo \"Error inserting data: \" . $this->conn->error .\"<br>\";\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tfunction getRow($table,$id){\r\n\t\t\tif ($this->conn->connect_error) {\r\n\t\t\t\tdie(\"Connection failed: \" . $this->conn->connect_error);\r\n\t\t\t}\r\n\r\n\t\t\t$sql = \"SELECT * FROM $table WHERE id = '$id'\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\tprint_r($result);\r\n\t\t\t\r\n\t\t\t$row = $result -> fetch_assoc();\r\n\t\t\t\r\n\t\t\treturn $row;\r\n\t\t}\r\n\t\t\r\n\t\tfunction getRowByToken($table,$token){\r\n\t\t\tif ($this->conn->connect_error) {\r\n\t\t\t\tdie(\"Connection failed: \" . $this->conn->connect_error);\r\n\t\t\t}\r\n\r\n\t\t\t$sql = \"SELECT * FROM $table WHERE `token` = '$token'\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\tif($result->num_rows != 1){\r\n\t\t\t\techo \"Error num rows: \".$result->num_rows.\"\\r\\n\";\r\n\t\t\t\techo $token;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$row = $result->fetch_assoc();\r\n\t\t\t\r\n\t\t\treturn $row;\r\n\t\t}\r\n\t\t\r\n\t\tfunction closeConnection(){\r\n\t\t\t$this->conn->close();\r\n\t\t}\r\n\t\r\n\t\tfunction getLastId(){\t\t\r\n\t\t\tif ($this->conn->connect_error) {\r\n\t\t\t\tdie(\"Connection failed: \" . $this->conn->connect_error);\r\n\t\t\t}\r\n\r\n\t\t\t$sql = 'select last_insert_id();';\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\t\r\n\t\t\t$row = $result -> fetch_assoc();\r\n\t\t\t\r\n\t\t\treturn $row;\r\n\t\t}\r\n\r\n\t\tfunction insertUser($login, $name, $surname, $role, $token=NULL, $email){\r\n\t//\t\t$stmt = $this->conn->prepare(\"INSERT INTO `usertable` VALUES (?, ?, ?, ?, NULL, ?, ?)\");\r\n\t//\t\t$roomId = 0;\r\n\t//\t\t$stmt->bind_param('sssssis', $login, $name, $surname, $role, $token, $roomId ,$email);\r\n\t\t\t\r\n\t//\t\t$stmt->execute();\r\n\t\t\r\n\t\t\t$sql  = \"INSERT INTO `usertable` (`login`, `name`, `surname`, `role`, `token`, `room`, `email`) VALUES ('\".$login.\"', '\".$name.\"', '\".$surname.\"', '\".$role.\"', '\".$token.\"', 0, '\".$email.\"')\";\r\n\t\t\t$this->conn->query($sql);\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tfunction getUserByToken($token){\r\n\t\t\treturn $this->getRowByToken(\"usertable\", $token);\r\n\t\t}\r\n\r\n\t\tfunction getUserByLogin($login){\r\n\t\t\t$sql = \"SELECT * FROM `usertable` WHERE `login`='$login'\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\treturn $result->fetch_assoc();\r\n\t\t}\r\n\r\n\t\tfunction updateUserToken($user, $token){\r\n\t\t\t$stmt = $this->conn->prepare(\"UPDATE `usertable` SET `token`=? WHERE `login`=?\");\r\n\t\t\t$stmt->bind_param(\"ss\", $token, $user);\r\n\t\t\t$stmt->execute();\r\n\t\t}\r\n\r\n\t\tfunction getRooms(){\r\n\t\t\t$sql = \"SELECT * FROM `rooms` LEFT JOIN `usertable` ON `admin`=`login`\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\t$rooms = array();\r\n\t\t\twhile($row = $result->fetch_assoc()){\r\n\t\t\t\t$room = [\r\n\t\t\t\t\t\"id\" => $row['id'],\r\n\t\t\t\t\t\"roomName\" => $row['roomName'],\r\n\t\t\t\t\t\"name\" => $row['name'],\r\n\t\t\t\t\t\"surname\" => $row['surname'],\r\n\t\t\t\t\t\"login\" => $row['admin']\r\n\t\t\t\t];\r\n\t\t\t\t$rooms[] = $room;\r\n\t\t\t}\r\n\t\t\treturn $rooms;\r\n\t\t}\r\n\r\n\t\tfunction createRoom($roomName){\r\n\t\t\t$token = htmlspecialchars($_COOKIE['token']);\r\n\t\t\t$user = $this->getUserByToken($token);\r\n\t\t\t$login = $user['login'];\r\n\r\n\t\t\t$stmt = $this->conn->prepare(\"INSERT INTO `rooms` VALUES (NULL, ?, ?)\");\r\n\t\t\t$stmt->bind_param(\"ss\", $roomName, $login);\r\n\t\t\t$stmt->execute();\r\n\r\n\t\t\treturn $this->conn->insert_id;\r\n\t\t}\r\n\r\n\t\tfunction createRoomTest( $roomName, $login ){\r\n            $stmt = $this->conn->prepare(\"INSERT INTO `rooms` VALUES (NULL, ?, ?)\");\r\n            $stmt->bind_param(\"ss\", $roomName, $login);\r\n            $stmt->execute();\r\n\r\n            return $this->conn->insert_id;\r\n        }\r\n\r\n\t\tfunction selectRoom($roomID){\r\n\t\t\t$token = htmlspecialchars($_COOKIE['token']);\r\n\t\t\t$stmt = $this->conn->prepare(\"UPDATE `usertable` SET `room` = ? WHERE `token`=?\");\r\n\t\t\t$stmt->bind_param(\"ds\", $roomID, $token);\r\n\t\t\t$stmt->execute();\r\n\t\t\t\r\n\t\t\t$sql = \"SELECT * FROM `usertable` LEFT JOIN `rooms` ON `room`=`id` WHERE `token`='$token'\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\tif($result->num_rows != 1){\r\n\t\t\t\treturn false;\r\n\t\t\t}else{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction getRoom($roomID){\r\n\t\t\t$sql = \"SELECT * FROM `rooms` WHERE `id`=$roomID\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\tif($result->num_rows != 1){\r\n\t\t\t\treturn false;\r\n\t\t\t}else{\r\n\t\t\t\treturn $result->fetch_assoc();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction deleteRoom($roomID){\r\n\t\t\t$stmt = $this->conn->prepare(\"DELETE FROM `rooms` WHERE `id`=?\");\r\n\t\t\t$stmt->bind_param(\"d\", $roomID);\r\n\t\t\t$stmt->execute();\r\n\t\t}\r\n\r\n\t\tfunction renameRoom($id, $name){\r\n\t\t\t$stmt = $this->conn->prepare(\"UPDATE `rooms` SET `roomName`=? WHERE `id`=?\");\r\n\t\t\t$stmt->bind_param(\"sd\", $name, $id);\r\n\t\t\t$stmt->execute();\r\n\t\t}\r\n\r\n\t\tfunction createFile($fileName, $fileLocation){\r\n\t\t\t$token = htmlspecialchars($_COOKIE['token']);\r\n\t\t\t//Uncomment if you want test this by test.html\r\n\t\t\t//$token = \"token1\";\r\n\t\t\t$user = $this->getUserByToken($token);\r\n\t\t\t$login = $user['login'];\r\n\t\t\t$stmt = $this->conn->prepare(\"INSERT INTO `files` VALUES (NULL, ?, ?, ?)\");\r\n\t\t\t$stmt->bind_param(\"sss\", $fileName, $fileLocation, $login);\r\n\t\t\t$stmt->execute();\r\n\r\n\t\t\treturn $this->conn->insert_id;\r\n\t\t}\r\n\t\t\r\n\t\tfunction removeFile($fileName){\r\n\t\t\t$stmt = $this->conn->prepare(\"DELETE FROM `files` WHERE `name`=?\");\r\n\t\t\t$stmt->bind_param(\"s\", $fileName);\r\n\t\t\t$stmt->execute();\r\n\r\n\t\t\treturn $this->conn->insert_id;\r\n\t\t}\r\n\t\t\r\n\t\tfunction getFile($fileName){\r\n\t\t\t$sql = \"SELECT * FROM `files` WHERE `fileName`='$fileName'\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\t\r\n\t\t\tif($result->num_rows != 1){\r\n\t\t\t\treturn false;\r\n\t\t\t}else{\r\n\t\t\t\treturn $result->fetch_assoc();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction getFileByOwner(){\r\n\t\t\t$token = htmlspecialchars($_COOKIE['token']);\r\n\t\t\t//Uncomment if you want test this by test.html\r\n\t\t\t//$token = \"token1\";\r\n\t\t\t$user = $this->getUserByToken($token);\r\n\t\t\t$owner = $user['login'];\r\n\t\t\r\n\t\t\t$sql = \"SELECT * FROM `files` WHERE `login`='$owner'\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\t\r\n\t\t\tif($result->num_rows <= 0){\r\n\t\t\t\treturn [];\r\n\t\t\t}else{\r\n\t\t\t\treturn $result -> fetch_all(MYSQLI_ASSOC);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction isOwner($fileName){\r\n\t\t\t$token = htmlspecialchars($_COOKIE['token']);\r\n\t\t\t//Uncomment if you want test this by test.html\r\n\t\t\t//$token = \"token1\";\r\n\t\t\t$user = $this->getUserByToken($token);\r\n\t\t\t$login = $user['login'];\r\n\t\t\t\r\n\t\t\t$sql = \"SELECT login FROM `files` WHERE `name`='$fileName'\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\t$result = $result->fetch_assoc();\r\n\t\t\t\r\n\t\t\tif($result['login'] == $login){\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction createAttendance( $roomID, $list ){\r\n\t\t\t$date = new DateTime(\"NOW\");\r\n\t\t\t$date = $date->format(\"Y-m-d H:i:s\");\r\n\t\t\t\r\n\t\t\t$room = $this->getRoom($roomID);\r\n\t\t\t$roomName = $room['roomName'];\r\n\t\t\t$rand = substr(md5(rand().microtime().rand()), 0, 3);\r\n\t\t\t$attendanceListName = $roomName.\"_\".$date.\"_\".$rand;\r\n            \r\n\t\t\t$sql = \"INSERT INTO `timesheet` VALUES (NULL, '$date', '$attendanceListName', '$roomID')\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\t\t\t\r\n\t\t\t$last_id = $this->conn->insert_id;\r\n\r\n\t\t\tforeach ($list as $key => $value) {\r\n\t\t\t\t$name = $value['name'];\r\n\t\t\t\t$subStart = strpos($name, \"(\")+1;\r\n\t\t\t\t$size = strlen($name)-1 - $subStart;\r\n\t\t\t\t$login = substr($name, $subStart, $size);\r\n\t\t\t\t$sql = \"INSERT INTO `timesheetuser` VALUES (NULL, '$last_id', '$login')\";\r\n\t\t\t\t$result = $this->conn->query($sql);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction getAttendance( $roomID, $name ){\r\n\t\t\t$sql = \"SELECT * FROM `timesheetuser` JOIN `timesheet` ON `timesheet`.`id`=`timesheetuser`.`timesheet` JOIN `usertable` ON `usertable`.`login`=`timesheetuser`.`user` WHERE `timesheet`.`name`='$name' AND `timesheet`.`room`='$roomID' ORDER BY `usertable`.`surname` ASC, `usertable`.`name` ASC, `usertable`.`login` ASC\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\r\n            $resultSet = array();\r\n            while ($cRecord = $result->fetch_assoc() ) {\r\n\t\t\t\t$tmp = [\r\n\t\t\t\t\t\"name\" => $cRecord['name'],\r\n\t\t\t\t\t\"surname\" => $cRecord['surname'],\r\n\t\t\t\t\t\"login\" => $cRecord['login']\r\n\t\t\t\t];\r\n                $resultSet[] = $tmp;\r\n            }\r\n            return $resultSet;\r\n\t\t\t}\r\n\r\n\t\tfunction getAllAttendanceListsByRoom( $roomID ){\r\n\t\t\t$sql = \"SELECT * FROM `timesheet` WHERE `room` = '$roomID';\";\r\n\t\t\t$result = $this->conn->query($sql);\r\n\r\n\t\t\t$array = array();\r\n\t\t\t\r\n\t\t\twhile($row = $result->fetch_assoc()){\r\n\t\t\t\t$item = [\r\n\t\t\t\t\t\"id\" => $row['id'],\r\n\t\t\t\t\t\"date\" => $row['date'],\r\n\t\t\t\t\t\"name\" => $row['name']\r\n\t\t\t\t];\r\n\t\t\t\t$array[] = $item;\r\n\t\t\t}\r\n\r\n\t\t\treturn $array;\r\n\t\t}\r\n\t}\r\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database/DatabaseConnection.php b/database/DatabaseConnection.php
--- a/database/DatabaseConnection.php	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/database/DatabaseConnection.php	(date 1611854250159)
@@ -142,8 +142,14 @@
 			$user = $this->getUserByToken($token);
 			$login = $user['login'];
 
-			$stmt = $this->conn->prepare("INSERT INTO `rooms` VALUES (NULL, ?, ?)");
-			$stmt->bind_param("ss", $roomName, $login);
+            $sql = "SELECT id FROM tableName ORDER BY id DESC LIMIT 1";
+            $roomId = $this->conn->query($sql);
+
+            $authToken = md5( "roomId=".$roomId );
+
+
+            $stmt = $this->conn->prepare("INSERT INTO `rooms` VALUES (NULL, ?, ?,?)");
+			$stmt->bind_param("sss", $roomName, $login, $authToken);
 			$stmt->execute();
 
 			return $this->conn->insert_id;
@@ -283,12 +289,18 @@
 				$sql = "INSERT INTO `timesheetuser` VALUES (NULL, '$last_id', '$login')";
 				$result = $this->conn->query($sql);
 
+				/*if($result == false){
+					echo $this->conn->error."\r\n";
+				}*/
 			}
 		}
 		
 		function getAttendance( $roomID, $name ){
 			$sql = "SELECT * FROM `timesheetuser` JOIN `timesheet` ON `timesheet`.`id`=`timesheetuser`.`timesheet` JOIN `usertable` ON `usertable`.`login`=`timesheetuser`.`user` WHERE `timesheet`.`name`='$name' AND `timesheet`.`room`='$roomID' ORDER BY `usertable`.`surname` ASC, `usertable`.`name` ASC, `usertable`.`login` ASC";
 			$result = $this->conn->query($sql);
+			// if($result == false){
+			// 	echo $this->conn->error."\r\n";
+			// }
 
             $resultSet = array();
             while ($cRecord = $result->fetch_assoc() ) {
@@ -305,6 +317,11 @@
 		function getAllAttendanceListsByRoom( $roomID ){
 			$sql = "SELECT * FROM `timesheet` WHERE `room` = '$roomID';";
 			$result = $this->conn->query($sql);
+			
+			// if($result == false){
+			// 	echo "[]";
+			// 	echo $this->conn->error."\r\n";
+			// }
 
 			$array = array();
 			
@@ -319,5 +336,41 @@
 
 			return $array;
 		}
+	
+	
+	function getRoomAuthToken( $roomId ){
+		$sql = "SELECT authToken FROM rooms WHERE id=$roomId";
+		$result = $this->conn->query($sql);
+		$data = $result->fetch_assoc()["authToken"];
+		
+		return $data;
+	}
+	
+	function setRoomAuthToken( $roomId ){
+		$authToken = md5( "roomId=".$roomId );
+		
+		$sql = "UPDATE rooms SET authToken = $authToken WHERE id = $roomId";
+	
+		return $this->conn->query($sql);
+	}
+	
+	
+	function getLoginAuthToken( $login ){
+		$sql = "SELECT * FROM usertable WHERE login = '$login'";
+		$result = $this->conn->query($sql);
+		$data = $result->fetch_assoc()["authToken"];
+		
+		return $data;
+	}
+	
+	function setLoginAuthToken( $login ){
+	//TODO
+		$authToken = md5( "login=".$login );
+		
+		$sql = "UPDATE usertable SET authToken = $authToken WHERE login = $login";
+	
+		return $this->conn->query($sql);
+	}
+	
 	}
 ?>
\ No newline at end of file
Index: frontendinz/src/components/room/Main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useContext, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Menu from \"../gui/Menu\";\r\nimport Chat from \"./Chat\";\r\nimport Footer from \"../gui/Footer\";\r\nimport Iframe from \"./Iframe\";\r\nimport IframeInputAdmin from \"./IframeInputAdmin\";\r\nimport Popup from \"../gui/Popup\";\r\nimport PopupSettings from \"../gui/PopupSettings\";\r\nimport PopupAttendanceList from \"../gui/PopupAttendanceList\";\r\nimport Loader from \"../other/Loader\";\r\nimport {AContext} from \"../../context/AContext\";\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../../css/App.css';\r\n\r\nfunction Main(props) {\r\n  const [hoverMenu, setHoverMenu] = useState(false);\r\n  const [checkedMenu, setChangeMenu] = useState(false);\r\n  const [hoverChat, setHoverChat] = useState(false);\r\n  const [checkedChat, setChangeChat] = useState(true);\r\n  const [checkedIframeInputAdmin, setCheckedIframeInputAdmin] = useState(false);\r\n  const [messages, setMesseges] = useState([]);\r\n  //const [historyB, setHistoryB] = useState([{title: \"strus100/Projekt-inzynierski\", link: \"https://github.com/strus100/Projekt-inzynierski\", date: \"2020-12-10 20:00\"}, {title: \"Projekt Inżynierski – Dysk Google\", link: \"https://drive.google.com/drive/folders/1OBH7hwjS7rxf_lPeMfBeXzLsXSPu-4sN\", date: \"2020-12-10 20:00\"}]);\r\n  const [historyB, setHistoryB] = useState([]);\r\n  const [usersList, setUsersList] = useState([]);\r\n  const [ws, setWebsocket] = useState(null); \r\n  const [iframeURL, setIframeURL] = useState(\"\"); \r\n  const [blockChat, setBlockChat] = useState(false);\r\n  const [handCounter, setHandCouter] = useState(0);\r\n\r\n  const[isHandRaised, setIsHandRaised] = useState(false);\r\n\r\n  let history = useHistory();\r\n  //console.log('in render:', blockChat)\r\n\r\n//   const [roomAPILogin, setRoomAPILogin] = useState(\"\");\r\n//   const [roomAPIToken, setRoomAPIToken] = useState(\"\");\r\n\r\n//   const [userAPILogin, setUserAPILogin] = useState(\"\");\r\n//   const [userAPIToken, setUserAPIToken] = useState(\"\");\r\n\r\n  const {setAuthenticated} = useContext(AContext);\r\n  const {setAdmin} = useContext(AContext);\r\n  \r\n  const {login} = useContext(AContext);\r\n  const {name, setName} = useContext(AContext);\r\n  const {surname, setSurname} = useContext(AContext);\r\n  const {setAccess} = useContext(AContext);\r\n  const {setToken} = useContext(AContext);\r\n  \r\n  const [iframeURLadmin, setIframeURLadmin] = useState(\"\"); \r\n  //const URL = 'wss://s153070.projektstudencki.pl:3000';\r\n  const URL = 'ws://localhost:1111';\r\n  //const proxy = 'https://s153070.projektstudencki.pl/proxy/index.php?url=';\r\n  const proxy = 'http://localhost/proxy/index.php?url=';\r\n\r\n  const { id } = useParams();\r\n  const [adminName, setAdminName] = useState(\"\");\r\n\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [roomAdmin, setRoomAdmin] = useState(false); //zmienić na false\r\n  const [loadingMain, setLoadingMain] = useState(false); //zmienić na false\r\n\r\n//   useEffect(() => {\r\n\t// axios.post('/rooms/', {\r\n\t// \troomID: id\r\n\t//   })\r\n\t//   .then(function (response) {\r\n\t// \tif(response.data.admin){ // do poprawy back\r\n\t// \t\tsetRoomAdmin(true);\r\n\t// \t}\r\n\t// \tsetRoomName(response.data.name);\r\n\t// \taddMessage({ type: \"chat\", chat: \"Witaj na kanale \" + response.data.name + \" wpisz /help, aby uzyskać pomoc dotyczącą chatu.\", name: \"SERVER\", messagetype: \"chat\" });\r\n\t// \tif(response) setLoadingMain(true);\r\n\t// \t//document.title = id + \" WykładyWebowe\";\r\n\t//   })\r\n\t//   .catch(function (error) {\r\n\t// \t//addMessage({ type: \"chat\", chat: \"Witaj na kanale \" + roomName + \" wpisz /help, aby uzyskać pomoc dotyczącą chatu.\", name: \"SERVER\", messagetype: \"chat\" });\r\n\t// \tconsole.log(error);\r\n\t// \t//document.title = id + \" WykładyWebowe\";\r\n\t//   });\r\n\r\n\tuseEffect(() => {\r\n\t\tvar bodyFormData = new FormData();\r\n\t\tbodyFormData.append('roomId', id);\r\n\t\taxios.all([\r\n\t\t\taxios.post('/API/UsersByRoom.php?roomId='+id,  {}),\r\n\t\t\taxios.post(\"/rooms/\", {\r\n\t\t\t\troomID: id \r\n\t\t\t})\r\n\t\t])\r\n\t\t.then(axios.spread((usersByRoomAPI, roomsAPI) => {\r\n\t\t\tif(usersByRoomAPI.data && roomsAPI.data){\r\n\t\t\t\tif(roomsAPI.data.admin){ // do poprawy back\r\n\t\t\t\t\tsetRoomAdmin(true);\r\n\t\t\t\t}\r\n\t\t\t\tsetRoomName(roomsAPI.data.name);\r\n\t\t\t\taddMessage({ type: \"chat\", chat: \"Witaj na kanale \" + roomsAPI.data.name + \" wpisz /help, aby uzyskać pomoc dotyczącą chatu.\", name: \"SERVER\", messagetype: \"chat\" });\r\n\t\t\t\tif(roomsAPI) setLoadingMain(true);\r\n\t\t\t\tif(usersByRoomAPI) setAdminName(usersByRoomAPI.data.name + \" \" + usersByRoomAPI.data.surname);\r\n\t\t\t\t//document.title = id + \" WykładyWebowe\";\r\n\t\t\t}\r\n\t\t}))\r\n\t\t.catch(function (error){\r\n\t\t\tconsole.log(error);\r\n\t\t});\r\n\r\n\t// możliwe że się przyda\r\n\r\n\t//   axios.all([\r\n\t// \t  \taxios.post('/API/UsersByRoom.php', {\r\n\t// \t\t\troomID: id \t\r\n\t// \t\t}),\r\n\t// \t\taxios.post(\"/API/user.php\", {\r\n\t// \t\t\tlogin: userLogin  \r\n\t// \t\t})\r\n\t// \t])\r\n\t// \t.then(axios.spread((usersByRoomAPI, userAPI) => {\r\n\t// \t\tif(usersByRoomAPI && userAPI){\r\n\t// \t\t\tsetRoomAPILogin(usersByRoomAPI.data.login);\r\n\t// \t\t\tsetRoomAPIToken(usersByRoomAPI.data.token);\r\n\t// \t\t\tsetUserAPILogin(userAPI.data.login);\r\n\t// \t\t\tsetUserAPIToken(userAPI.data.token);\r\n\t// \t\t}\r\n\t// \t}))\r\n\t// \t.catch(function (error){\r\n\t// \t\tconsole.log(error);\r\n\t// \t});\r\n\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n\t  window.scrollTo(0,0);\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n\tif(loadingMain){\r\n\t\tvar timeout = 1000;\r\n\t\tvar connectInterval;\r\n\t\tvar callbackInterval;\r\n\t\tvar webSocket;\r\n\r\n\t\tfunction checkLoadedIframe(callback){\r\n\t\t\tvar contentDocument = null;\r\n\t\t\tif(roomAdmin){\r\n\t\t\t\tcontentDocument = document.getElementById(\"scoreboardx\").contentDocument;\r\n\t\t\t}else{\r\n\t\t\t\tcontentDocument = document.getElementById(\"scoreboard\").contentDocument;\r\n\t\t\t}\r\n\t\t\tif(contentDocument.readyState !== \"complete\" && window.location.href.indexOf(\"room\") > -1 && contentDocument !== null){\r\n\t\t\t\tcallbackInterval = setTimeout(function(){\r\n\t\t\t\t\tcheckLoadedIframe(callback);\r\n\t\t\t\t}, 500);\r\n\t\t\t\t//console.log(\"scrolled\");\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tcallback();\r\n\t\t\t\t//console.log(\"callback\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction connect(){\r\n\t\twebSocket = new WebSocket(URL);\r\n\t\r\n\t\twebSocket.onopen = () => {\r\n\t\t\t//timeout = 1000;\r\n\t\t\t//console.log('connected');\r\n\t\t\t//webSocket.send(token);\r\n\t\t\t//webSocket.send(\"1\"); //debug\r\n\t\t\tclearTimeout(connectInterval);\r\n\t\t\tsetWebsocket(webSocket);\r\n\t\t};\r\n\t\r\n\t\twebSocket.onmessage = (evt) => {\r\n\t\t\tconst message = evt.data;\r\n\t\t\t//console.log(JSON.parse(message).type);\r\n\t\t\tswitch(JSON.parse(message).type){\r\n\t\t\tcase \"chat\": return addMessage(JSON.parse(message));\r\n\t\t\tcase \"oldchat\": return oldMessages();\r\n\t\t\tcase \"auth\": return connected();\r\n\t\t\tcase \"event\":\r\n\t\t\t\tvar element = null;\r\n\t\t\t\tif(roomAdmin){\r\n\t\t\t\t\telement = document.getElementById(\"scoreboardx\").contentWindow;\r\n\t\t\t\t}else{\r\n\t\t\t\t\telement = document.getElementById(\"scoreboard\").contentWindow;\r\n\t\t\t\t}\r\n\t\t\t\tvar parsed = JSON.parse(message);\r\n\t\t\t\tswitch(parsed.event){\r\n\t\t\t\t\tcase \"scroll\":\r\n\t\t\t\t\t\tcheckLoadedIframe(function(){\r\n\t\t\t\t\t\t\telement.scrollTo(parsed.x, parsed.y);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"redirection\":\r\n\t\t\t\t\t\thandleChangeURL(evt, parsed.url);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"updatelist\": return handleUsersList(JSON.parse(message).clients);\r\n\t\t\tcase \"updatehistory\": return handleUpdateHistory(JSON.parse(message).history);\r\n\t\t\t// case \"deleteroom\": return handleDeleteRoom();\r\n\t\t\tcase \"handraise\": return raiseHand(JSON.parse(message).state);\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\twebSocket.onclose = e => {\r\n\t\t\tif(window.location.href.indexOf(\"room\") > -1){\r\n\t\t\t\t//setWebsocket(null); //do przetestowania - możliwy błąd uncomment jeśli wina backu\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Socket is closed. Reconnect will be attempted in ${Math.min(\r\n\t\t\t\t\t\t10000 / 1000,\r\n\t\t\t\t\t\t(timeout + timeout) / 1000\r\n\t\t\t\t\t)} second.`,\r\n\t\t\t\t\te.reason\r\n\t\t\t\t);\r\n\t\t\t\tconst message = { type: \"chat\", chat: `Nie połączono z chatem, ponowna próba połączenia za ${Math.min(10000 / 1000, (timeout + timeout) / 1000)} sekund.`, name: \"SERVER\" }\r\n\t\t\t\taddMessage(message);\r\n\t\t\t\ttimeout = timeout + timeout;\r\n\t\t\t\tconnectInterval = setTimeout(check, Math.min(10000, timeout));\r\n\t\t\t\tif(roomAdmin && (document.getElementById(\"scoreboardx\") !== null && document.getElementById(\"scoreboardx\").contentDocument !== null && document.getElementById(\"scoreboardx\") !== undefined && document.getElementById(\"scoreboardx\").contentDocument !== undefined)){\r\n\t\t\t\t\t//removeListenerScroll();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\twebSocket.onerror = (err) => {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"Socket encountered error: \",\r\n\t\t\t\terr.message,\r\n\t\t\t\t\"Closing socket\"\r\n\t\t\t);\r\n\t\r\n\t\t\twebSocket.close();\r\n\t\t};\r\n\t\r\n\t\treturn () => {\r\n\t\t\twebSocket.close();\r\n\t\t};\r\n\t\t}\r\n\r\n\t\tfunction check(){\r\n\t\t\tif ((!ws || ws.readyState === WebSocket.CLOSED) && (window.location.href.indexOf(\"room\") > -1)) {\r\n\t\t\t\tconnect();\r\n\t\t\t\thandleDeletedRoom();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// console.log('trying to connect');\r\n\t\tconnect();\r\n\r\n\t\tfunction setListeners(){\r\n\t\t\tsetListenerScroll();\r\n\t\t\tsetListenerRedirection();\r\n\t\t}\r\n\r\n\t\tfunction setListenerScroll(){\r\n\t\t\tif(roomAdmin){\r\n\t\t\t\tconst scrollStop = function (callback) {\r\n\t\t\t\tif (!callback || typeof callback !== 'function') return;\r\n\t\t\t\tvar isScrolling;\r\n\t\t\t\tdocument.getElementById(\"scoreboardx\").addEventListener('load', function(event) {\r\n\t\t\t\t\tdocument.getElementById(\"scoreboardx\").contentDocument.addEventListener('scroll', function(event) {\r\n\t\t\t\t\twindow.clearTimeout(isScrolling);\r\n\t\t\t\t\tisScrolling = setTimeout(function() {\r\n\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t}, 66);\r\n\t\t\t\t\t}, false);\r\n\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tscrollStop(function () {\r\n\t\t\t\t// console.log(\"scroll frame5\");\r\n\t\t\t\tconst message = { type: \"event\", event: \"scroll\", x: document.getElementById(\"scoreboardx\").contentWindow.scrollX, y: document.getElementById(\"scoreboardx\").contentWindow.scrollY };\r\n\t\t\t\tif(webSocket.readyState === WebSocket.OPEN){\r\n\t\t\t\t\twebSocket.send(JSON.stringify(message));\r\n\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction setListenerRedirection(){\r\n\t\t\tif(roomAdmin){\r\n\t\t\t\tdocument.getElementById(\"scoreboardx\").addEventListener('load', function(event) {\r\n\t\t\t\t\tvar address =  this.contentWindow.location.href;\r\n\t\t\t\t\tvar replaced;\r\n\t\t\t\t\tif(address.includes(proxy)){\r\n\t\t\t\t\t\treplaced = address.replace(proxy, \"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\treplaced = address.replace(\"index.php?q\", \"index.php?url\");\r\n\t\t\t\t\t\treplaced = replaced.replace(proxy, \"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst message = { type: \"event\", event: \"redirection\", url: replaced };\r\n\t\t\t\t\tif(webSocket.readyState === WebSocket.OPEN && decodeURIComponent(replaced) !== \"http://\" && decodeURIComponent(replaced) !== \"https://\"){\r\n\t\t\t\t\t\twebSocket.send(JSON.stringify(message));\r\n\t\t\t\t\t\tsetIframeURLadmin(replaced);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//console.log(\"frame9: \"+ this.contentWindow.location.href);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction connected(){\r\n\t\t\tif(roomAdmin){\r\n\t\t\t\tsetListeners();\r\n\t\t\t\t//console.log(\"roomAdmin\");\r\n\t\t\t}\r\n\t\t\tconst message = { type: \"chat\", chat: `Połączono z chatem.`, name: \"SERVER\" }\r\n\t\t\taddMessage(message);\r\n\t\t  }\r\n\t}\r\n\r\n\treturn () => {\r\n\t//   console.log(\"clear\");\r\n\t  clearTimeout(connectInterval);\r\n\t  clearInterval(callbackInterval);\r\n\t  if(roomAdmin && (document.getElementById(\"scoreboardx\") !== null && document.getElementById(\"scoreboardx\").contentDocument !== null && document.getElementById(\"scoreboardx\") !== undefined && document.getElementById(\"scoreboardx\").contentDocument !== undefined)){\r\n\t\t//removeListenerScroll();\r\n\t  }\r\n\t  if(webSocket){\r\n\t\twebSocket.close();\r\n\t\tsetWebsocket(null);\r\n\t  }\r\n\t};\r\n  }, [loadingMain]);\r\n\r\n  function scrollToBottom (id) {\r\n\tvar div = document.getElementById(id);\r\n\tif(div)\tdiv.scrollTop = div.scrollHeight - div.clientHeight;\r\n\t//console.log(\"dol \" + blockChat); a może tylko na moje wiadomości?\r\n }\r\n\r\n function handleAddMessage(message){\r\n\tsetMesseges(x => [...x, message] );\r\n }\r\n\r\n function oldMessages(){\r\n\tsetMesseges([]);\r\n\taddMessage({ type: \"chat\", chat: \"Witaj na kanale \" + roomName + \" wpisz /help, aby uzyskać pomoc dotyczącą chatu.\", name: \"SERVER\", messagetype: \"chat\" });\r\n }\r\n\r\n function addMessageCallback(x, callback){\r\n\t callback(x);\r\n\t const timer = setTimeout(() => {\r\n\t\tif(!blockChat) scrollToBottom(\"chat-area\");\r\n\t  }, 100);\r\n\r\n\t  return () => clearTimeout(timer); \r\n }\r\n\r\n  function addMessage(message){\r\n\t // setMesseges(x => [message, ...x] );\r\n\t addMessageCallback(message, handleAddMessage);\r\n\t   //beep();\r\n  }\r\n\r\n  function submitMessage(messageString){\r\n    if( ws != null ){\r\n      if( ws.readyState === 1 ){\r\n        if( messageString !== \"\"){\r\n\t\t\tvar message = \"\";\r\n\t\t\tif(messageString[0] === \"/\"){\r\n\t\t\t\tif(messageString[1] === \"c\" && messageString.trim().length !== 2 && messageString[2] === \" \"){\r\n\t\t\t\t\tmessage = { type: \"chat\", chat: messageString.replace(\"/c \",\"\"), name: name+\" \"+surname, messagetype: \"code\" };\r\n\t\t\t\t\tws.send(JSON.stringify(message));\r\n\t\t\t\t}\r\n\t\t\t\telse if(messageString === \"/help\" || messageString === \"/h\" || messageString === \"/pomoc\"){\r\n\t\t\t\t\tmessage = { type: \"chat\", chat: \"Komendy dostępne na czacie: \\n\\n/c tekst -> Wyświetla tekst jako kod\\n\\n/help -> Wyświetla pomoc\\n\\n//tekst -> pozwala na wypisanie wiadomości, która zaczyna się od '/' na czacie (nie będzie traktowana jako komenda), przykładowo '//c tekst' wypisze '/c tekst'\", name: \"SERVER\", messagetype: \"code\" }\r\n\t\t\t\t\taddMessage(message);\r\n\t\t\t\t}\r\n\t\t\t\telse if(messageString === \"/c\"){\r\n\t\t\t\t\tmessage = { type: \"chat\", chat: \"/c tekst -> Wyświetla tekst jako kod\", name: \"SERVER\", messagetype: \"code\" }\r\n\t\t\t\t\taddMessage(message);\r\n\t\t\t\t}\r\n\t\t\t\telse if(messageString[1] === \"/\"){\r\n\t\t\t\t\tmessage = { type: \"chat\", chat: messageString.slice(1), name: name+\" \"+surname, messagetype: \"chat\" };\r\n\t\t\t\t\tws.send(JSON.stringify(message))\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmessage = { type: \"chat\", chat: \"Nieznana komenda: \" + messageString, name: \"SERVER\", messagetype: \"chat\" };\r\n\t\t\t\t\taddMessage(message);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tmessage = { type: \"chat\", chat: messageString, name: name+\" \"+surname, messagetype: \"chat\" };\r\n\t\t\t\tws.send(JSON.stringify(message))\r\n\t\t\t}\r\n\t\t\t// if(!messageString.includes(\"/c\", 0)){\r\n\t\t\t// \tmessage = { type: \"chat\", chat: messageString, name: name+\" \"+surname, messagetype: \"chat\" };\r\n\t\t\t// }\r\n\t\t\t// else{\r\n\t\t\t// \tmessage = { type: \"chat\", chat: messageString.replace(\"/c\",\"\"), name: name+\" \"+surname, messagetype: \"code\" };\r\n\t\t\t// \t//message.chat.replace(/\\n/g, \"\\\\\\\\n\").replace(/\\r/g, \"\\\\\\\\r\").replace(/\\t/g, \"\\\\\\\\t\");\r\n\t\t\t// }\r\n\t\t\t// //console.log(messageString);\r\n          \t// ws.send(JSON.stringify(message))\r\n          \t//addMessage(message)\r\n        }\r\n      }\r\n      else{\r\n        addMessage({ type: \"chat\", chat: \"Nie połączono z chatem\", name: \"SERVER\" })\r\n      }\r\n    }\r\n    else{\r\n      addMessage({ type: \"chat\", chat: \"Nie połączono z chatem\", name: \"SERVER\"  })\r\n    }\r\n  }\r\n\r\n  function handleChangeMenu(checkedMenu){\r\n    setChangeMenu(checkedMenu => !checkedMenu);\r\n  }\r\n\r\n  function handleChangeChat(checkedChat){\r\n    setChangeChat(checkedChat => !checkedChat);\r\n  }\r\n\r\n  function handleChangeIframeInputAdmin(checkedIframeInputAdmin){\r\n    setCheckedIframeInputAdmin(checkedIframeInputAdmin => !checkedIframeInputAdmin);\r\n  }\r\n\r\n  function handleHoverChat(x){\r\n    setHoverChat(x);\r\n  }\r\n\r\n  function handleHoverMenu(x){\r\n    setHoverMenu(x);\r\n  }\r\n\r\n  function handleLogout(){\r\n\taxios.get('/login_system/login.php?logout', {  })\r\n\t\t.then(function (response) {\r\n\t\t})\r\n\t\t.catch(function (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t});\r\n\tsetAccess(false);\r\n\tsetName(false);\r\n\tsetSurname(false);\r\n\tsetToken(false);\r\n\tsetAdmin(false);\r\n\tsetAuthenticated(false);\r\n  }\r\n\r\n  function handleChangeURL(e, url){\r\n\t  if(url){\r\n\t\te.preventDefault();\r\n\t\tsetIframeURL(url);\r\n\t\tif(roomAdmin && document.getElementById(\"scoreboardx\").contentDocument){ // jak wywali coś złego to trzeba inaczej załatwić url change\r\n\t\t\tsetIframeURLadmin(url);\r\n\t\t\tdocument.getElementById(\"scoreboardx\").contentDocument.location.reload(true);\r\n\t\t}\r\n\t  }\r\n  }\r\n\r\n  function handleUsersList(x){\r\n\t  setUsersList(x);\r\n\t  var counter = 0;\r\n\t  for(var i = 0; i < x.length; i++){\r\n\t\t  if(x[i].hand === true){\r\n\t\t\t\tcounter = counter + 1;\r\n\t\t  }\r\n\t\t}\r\n\t\tsetHandCouter(counter);\r\n  }\r\n\r\n  function handleUpdateHistory(x){\r\n\t  if(roomAdmin) setHistoryB(x);\r\n  }\r\n\r\n  function changePermission(login){\r\n\t\tconst message = { type: \"mute\", login: login };\r\n\t\tws.send(JSON.stringify(message))\r\n\t}\r\n\r\n\tfunction handleRaiseHand(){\r\n\t\tconsole.log(\"click\");\r\n\t\tif(ws != null){\r\n\t\t\tconst message = { type: \"hand\" };\r\n\t\t\tws.send(JSON.stringify(message));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleDeletedRoom(){\r\n\t\taxios.post(\"/rooms/\", {\r\n\t\t\troomID: id \r\n\t\t}).then(function (response) {\r\n\t\t\tif(!response.data){\r\n\t\t\t\thistory.push(\"/lobby\");\r\n\t\t\t}\r\n\t\t}).catch(function (error) {\r\n            history.push(\"/lobby\");\r\n        })\r\n\t}\r\n\r\n\tfunction raiseHand(x){\r\n\t\tif(x === true){\r\n\t\t\tsetIsHandRaised(true);\r\n\t\t}else{\r\n\t\t\tsetIsHandRaised(false);\r\n\t\t}\r\n\t}\r\n\r\n  return (\r\n\t  <div className=\"main\">\r\n\t\t  <span style={{zIndex: 150, position: \"fixed\", height: 70+\"px\", width: 70+\"px\", clipPath: \"circle(50px at 7px 7px)\"}}>\t\t\r\n\t\t\t\t<div className=\"circle2\">{props.lightMode ? <span className=\"material-icons themebutton\" onClick={props.lightModeHandler}>bedtime</span>: <span className=\"material-icons themebutton\" onClick={props.lightModeHandler} style={{color: \"#fff\"}}>brightness_4</span>\r\n\t\t\t\t}</div>\r\n\t\t\t</span>\r\n\t\t  {loadingMain ?\r\n\t\t\t<div>\r\n\t\t\t\t{ roomAdmin ?\r\n\t\t\t\t\t<div className={\"iframe-container-chat\"}>\r\n\t\t\t\t\t\t<iframe src={\"../WEBRTC/audio-admin.html?id=\"+id} className={\"iframe-container\"} allow=\"camera *;microphone *\"/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<div className={\"iframe-container-chat\"}>\r\n\t\t\t\t\t\t<iframe src={\"../WEBRTC/audio-user.html?id=\"+id} className={\"iframe-container\"} allow=\"camera *;microphone *\"/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t{roomAdmin &&\r\n\t\t\t<IframeInputAdmin\r\n\t\t\t\tcheckedIframeInputAdmin={checkedIframeInputAdmin}\r\n\t\t\t\tiframeURL={iframeURL}\r\n\t\t\t\thandleChangeURL={handleChangeURL}\r\n\t\t\t/>\r\n\t\t\t}\r\n\t\t\t<Menu \r\n\t\t\t\tcheckedMenu={checkedMenu} \r\n\t\t\t\thoverMenu={hoverMenu}\r\n\t\t\t\thandleLogout={handleLogout}\r\n\t\t\t\troomAdmin={roomAdmin}\r\n\t\t\t\tfromMain={true}\r\n\t\t\t\t/>\r\n\t\t\t<Iframe\r\n\t\t\t\tproxy={proxy}\r\n\t\t\t\troomAdmin={roomAdmin}\r\n\t\t\t\tiframeURLadmin={iframeURLadmin}\r\n\t\t\t\tiframeURL={iframeURL}\r\n\t\t\t/>\r\n\t\t\t{roomAdmin && <Popup\r\n\t\t\t\t\t\t\tfromMain={true}\r\n\t\t\t\t\t\t\troomName={roomName}\r\n\t\t\t\t\t\t\thandleChangeURL={handleChangeURL}\r\n\t\t\t\t\t\t\tid={id}\r\n\t\t\t\t\t\t\t/>}\r\n\t\t\t{roomAdmin && <PopupSettings\r\n\t\t\t\t\t\t\tfromMain={true}\r\n\t\t\t\t\t\t\troomName={roomName}\r\n\t\t\t\t\t\t\thandleChangeURL={handleChangeURL}\r\n\t\t\t\t\t\t\tid={id}\r\n\t\t\t\t\t\t\t// ws={ws}\r\n\t\t\t\t\t\t\t/>}\r\n\t\t\t{roomAdmin && <PopupAttendanceList\r\n\t\t\t\t\t\t\troomAdmin={roomAdmin}\r\n\t\t\t\t\t\t\tusersList={usersList}\r\n\t\t\t\t\t\t\troomID={id}\r\n\t\t\t\t\t\t\t/>}\r\n\t\t\t<Chat\r\n\t\t\t\troomAdmin={roomAdmin}\r\n\t\t\t\tname={name}\r\n\t\t\t\tsurname={surname}\r\n\t\t\t\tcheckedChat={checkedChat} \r\n\t\t\t\thoverChat={hoverChat} \r\n\t\t\t\tws={ws} \r\n\t\t\t\tmessages={messages} \r\n\t\t\t\thistoryB={historyB}\r\n\t\t\t\tusersList={usersList}\r\n\t\t\t\thandCounter={handCounter}\r\n\t\t\t\tchangePermission={changePermission}\r\n\t\t\t\tsubmitMessage={submitMessage}\r\n\t\t\t\thandleChangeURL={handleChangeURL}\r\n\t\t\t\tscrollToBottom={scrollToBottom}\r\n\t\t\t\t/>\r\n\t\t\t<Footer \r\n\t\t\t\tlobby={false}\r\n\t\t\t\troomAdmin={roomAdmin}\r\n\t\t\t\tcheckedMenu={checkedMenu} \r\n\t\t\t\tcheckedChat={checkedChat} \r\n\t\t\t\tcheckedIframeInputAdmin={checkedIframeInputAdmin}\r\n\t\t\t\thandleChangeChat={handleChangeChat} \r\n\t\t\t\thandleChangeMenu={handleChangeMenu} \r\n\t\t\t\thandleHoverChat={handleHoverChat}\r\n\t\t\t\thandleHoverMenu={handleHoverMenu}\r\n\t\t\t\thandleChangeIframeInputAdmin={handleChangeIframeInputAdmin}\r\n\t\t\t\thandleRaiseHand={handleRaiseHand}\r\n\t\t\t\thandCounter={handCounter}\r\n\t\t\t\tisHandRaised={isHandRaised}\r\n\t\t\t\t// roomAPILogin={roomAPILogin}\r\n\t\t\t\t// roomAPIToken={roomAPIToken}\r\n\t\t\t\t// userAPILogin={userAPILogin}\r\n\t\t\t\t// userAPIToken={userAPIToken}\r\n\t\t\t\tid={id}\r\n\t\t\t\tlogin={login}\r\n\t\t\t\tadminName={adminName}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t:\r\n\t\t\t<div>\r\n\t\t\t\t<Loader/>\r\n\t\t\t\t<Menu \r\n\t\t\t\t\tcheckedMenu={checkedMenu} \r\n\t\t\t\t\thoverMenu={hoverMenu}\r\n\t\t\t\t\thandleLogout={handleLogout}\r\n\t\t\t\t\t/>\r\n\t\t\t\t<Footer \r\n\t\t\t\t\troomAdmin={roomAdmin}\r\n\t\t\t\t\tcheckedMenu={checkedMenu} \r\n\t\t\t\t\tcheckedChat={checkedChat} \r\n\t\t\t\t\tcheckedIframeInputAdmin={checkedIframeInputAdmin}\r\n\t\t\t\t\thandleChangeChat={handleChangeChat} \r\n\t\t\t\t\thandleChangeMenu={handleChangeMenu} \r\n\t\t\t\t\thandleHoverChat={handleHoverChat}\r\n\t\t\t\t\thandleHoverMenu={handleHoverMenu}\r\n\t\t\t\t\thandleChangeIframeInputAdmin={handleChangeIframeInputAdmin}\r\n\t\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t  }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontendinz/src/components/room/Main.js b/frontendinz/src/components/room/Main.js
--- a/frontendinz/src/components/room/Main.js	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/frontendinz/src/components/room/Main.js	(date 1611750445940)
@@ -85,7 +85,6 @@
 		var bodyFormData = new FormData();
 		bodyFormData.append('roomId', id);
 		axios.all([
-			axios.post('/API/UsersByRoom.php?roomId='+id,  {}),
 			axios.post("/rooms/", {
 				roomID: id 
 			})
Index: login_system/login.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse JetBrains\\PhpStorm\\Pure;\r\n\r\nrequire_once __DIR__.\"/../database/DatabaseConnection.php\";\r\n    require_once __DIR__.\"/ldap.php\";\r\n\r\n    $TEST = TRUE;\r\n\r\n\r\nfunction isStudent( $login )\r\n{\r\n    return strpos( strtolower( $login ), 'student' );\r\n}\r\n\r\nfunction isAdmin( $login )\r\n{\r\n    return strpos( strtolower( $login ), 'pracownik' );\r\n}\r\n\r\n    $dbConnection = new DatabaseConnection();\r\n    $dbConnection->connect();\r\n    $refreshToken = md5(rand().microtime().rand());\r\n    $accessToken = md5(rand().microtime().rand());\r\n    $domain = ($_SERVER['HTTP_HOST'] != 'localhost') ? $_SERVER['HTTP_HOST'] : false;\r\n\r\n    // If token is present check if exists in DB and refresh token\r\n    if(isset($_COOKIE['token'])){\r\n        $user = $dbConnection->getUserByToken(htmlspecialchars($_COOKIE['token']));\r\n        if($user){\r\n\t\t\tif(isset($_GET['logout'])){\r\n\t\t\t\t$dbConnection->updateUserToken($user['login'], \"\");\r\n\t\t\t\tsetcookie(\"token\", \"\", time()-3600, \"/\", $domain, false, true);\r\n\t\t\t\t$dbConnection->closeConnection();\r\n\t\t\t\tdie(\"1\");\r\n\t\t\t}\r\n            $dbConnection->updateUserToken($user['login'], $refreshToken);\r\n            setcookie(\"token\", $refreshToken, time()+3600, \"/\", $domain, false, true);\r\n            $dbConnection->closeConnection();\r\n\t\t\t$return = [\r\n\t\t\t\t\"type\" => \"login\",\r\n\t\t\t\t\"login\" => $user['login'],\r\n\t\t\t\t\"access\" => $user['role'],\r\n\t\t\t\t\"name\" => $user['name'],\r\n\t\t\t\t\"surname\" => $user['surname']\r\n\t\t\t];\r\n            die(json_encode($return));\r\n        }else{\r\n            $dbConnection->closeConnection();\r\n            setcookie(\"token\", \"\", time()-3600, \"/\", $domain, false, true);\r\n            header(\"X-PHP-Response-Code: 401\", true, 401);\r\n            die(\"{\\\"type\\\": \\\"login\\\", \\\"login\\\": 0, \\\"access\\\": \\\"token\\\"}\");\r\n        }\r\n    }\r\n    // react and axios input parsing\r\n    //LDAP login\r\n    else{\r\n        $request_body = file_get_contents('php://input');\r\n        $data = json_decode($request_body, true);\r\n        if(isset($data['login']) && isset($data['pwd'])){\r\n            $login = htmlspecialchars($data['login']);\r\n            $password = htmlspecialchars($data['pwd']);\r\n            $result = null;\r\n            \r\n\t\t\t\r\n                if( !(isStudent( $login ) === false) )\r\n                {\r\n                    $result = [\r\n                        \"type\" => \"login\",\r\n                        \"login\" => $login,\r\n                        \"access\" => \"student\",\r\n                        \"name\" => \"Student\",\r\n                        \"surname\" => \"Student\",\r\n\t\t\t\t\t\t\"email\" => $login.\"@test.pl\"\r\n                    ];\r\n                }\r\n                elseif( !(isAdmin( $login ) === false) )\r\n                {\r\n                    $result = [\r\n                        \"type\" => \"login\",\r\n                        \"login\" => $login,\r\n                        \"access\" => \"pracownik\",\r\n                        \"name\" => \"Pracownik\",\r\n                        \"surname\" => \"Admin\",\r\n\t\t\t\t\t\t\"email\" => $login.\"@test.pl\"\r\n                    ];\r\n                }else{\r\n                    $result = LDAP::login($login, $password);\r\n                }\r\n\r\n            if($result['login'] != '0'){\r\n                $user = $dbConnection->getUserByLogin($login);\r\n                // If user exists in DB update token | if not -> insert user\r\n                if($user){\r\n                    $dbConnection->updateUserToken($user['login'], $refreshToken);\r\n                }else{\r\n                    $dbConnection->insertUser($login, $result['name'], $result['surname'], $result['access'], $refreshToken, $result['email'] );\r\n                }\r\n                setcookie(\"token\", $refreshToken, time()+3600, \"/\", $domain, false, true);\r\n                $result['token'] = $refreshToken;\r\n                $result['login'] = $login;\r\n            }\r\n            $dbConnection->closeConnection();\r\n            echo json_encode($result);\r\n        }\r\n        else{\r\n            $result = [\r\n                \"type\" => \"login\",\r\n                \"login\" => 0,\r\n                \"access\" => \"login\"\r\n            ];\r\n            $dbConnection->closeConnection();\r\n            echo json_encode($result);\r\n        }\r\n    }\r\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/login_system/login.php b/login_system/login.php
--- a/login_system/login.php	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/login_system/login.php	(date 1611747928893)
@@ -95,6 +95,7 @@
                     $dbConnection->updateUserToken($user['login'], $refreshToken);
                 }else{
                     $dbConnection->insertUser($login, $result['name'], $result['surname'], $result['access'], $refreshToken, $result['email'] );
+					$dbConnection->setLoginAuthToken( md5( "login=".$login ) );
                 }
                 setcookie("token", $refreshToken, time()+3600, "/", $domain, false, true);
                 $result['token'] = $refreshToken;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3d71e924-d953-4d0c-88ea-8a592bf0e806\" name=\"Default Changelist\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ComposerSettings\">\r\n    <pharConfigPath>$PROJECT_DIR$/proxy/composer.json</pharConfigPath>\r\n    <execution />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"PHP 7.4\">\r\n    <include_path>\r\n      <path value=\"$PROJECT_DIR$/proxy/vendor/athlon1600/php-proxy-plugin-bundle\" />\r\n      <path value=\"$PROJECT_DIR$/proxy/vendor/composer\" />\r\n    </include_path>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1mxpV9bVhvfq0yqD7feBVCWemMu\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/phpunit-9.5.0.phar\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"DatabaseConnectionTest.testInsertAttendance\" type=\"PHPUnitRunConfigurationType\" factoryName=\"PHPUnit\" temporary=\"true\">\r\n      <TestRunner class=\"DatabaseConnectionTest\" file=\"$PROJECT_DIR$/DatabaseConnectionTest.php\" method=\"testInsertAttendance\" scope=\"Method\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"PHPUnit.DatabaseConnectionTest.testInsertAttendance\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3d71e924-d953-4d0c-88ea-8a592bf0e806\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1610445120315</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1610445120315</updated>\r\n      <workItem from=\"1610445122785\" duration=\"4192000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/.idea/workspace.xml	(date 1611854250759)
@@ -1,13 +1,24 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="3d71e924-d953-4d0c-88ea-8a592bf0e806" name="Default Changelist" comment="" />
+    <list default="true" id="3d71e924-d953-4d0c-88ea-8a592bf0e806" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/API/UsersByLogin.php" beforeDir="false" afterPath="$PROJECT_DIR$/API/UsersByLogin.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/API/UsersByRoom.php" beforeDir="false" afterPath="$PROJECT_DIR$/API/UsersByRoom.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SERVER/Application/MessageService.php" beforeDir="false" afterPath="$PROJECT_DIR$/SERVER/Application/MessageService.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SERVER/Infrastructure/WebSocket.php" beforeDir="false" afterPath="$PROJECT_DIR$/SERVER/Infrastructure/WebSocket.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/database/DatabaseConnection.php" beforeDir="false" afterPath="$PROJECT_DIR$/database/DatabaseConnection.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/files/uploads/PdfToHtml.php" beforeDir="false" afterPath="$PROJECT_DIR$/files/uploads/PdfToHtml.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontendinz/src/components/gui/Footer.js" beforeDir="false" afterPath="$PROJECT_DIR$/frontendinz/src/components/gui/Footer.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontendinz/src/components/room/Main.js" beforeDir="false" afterPath="$PROJECT_DIR$/frontendinz/src/components/room/Main.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/login_system/login.php" beforeDir="false" afterPath="$PROJECT_DIR$/login_system/login.php" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="ComposerSettings">
+  <component name="ComposerSettings" doNotAsk="true">
     <pharConfigPath>$PROJECT_DIR$/proxy/composer.json</pharConfigPath>
     <execution />
   </component>
@@ -18,6 +29,8 @@
     <include_path>
       <path value="$PROJECT_DIR$/proxy/vendor/athlon1600/php-proxy-plugin-bundle" />
       <path value="$PROJECT_DIR$/proxy/vendor/composer" />
+      <path value="$PROJECT_DIR$/proxy/vendor/athlon1600/php-proxy" />
+      <path value="$PROJECT_DIR$/proxy/vendor/athlon1600/youtube-downloader" />
     </include_path>
   </component>
   <component name="ProjectId" id="1mxpV9bVhvfq0yqD7feBVCWemMu" />
@@ -29,7 +42,7 @@
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/phpunit-9.5.0.phar" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
     <property name="nodejs_package_manager_path" value="npm" />
     <property name="vue.rearranger.settings.migration" value="true" />
   </component>
@@ -53,6 +66,8 @@
       <option name="presentableId" value="Default" />
       <updated>1610445120315</updated>
       <workItem from="1610445122785" duration="4192000" />
+      <workItem from="1611748397406" duration="3818000" />
+      <workItem from="1611853847592" duration="402000" />
     </task>
     <servers />
   </component>
Index: frontendinz/src/components/gui/Footer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useContext, useState, useEffect } from 'react';\r\nimport '../../css/App.css'\r\nimport {AContext} from \"../../context/AContext\";\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nfunction Footer(props){\r\n    const {admin} = useContext(AContext);\r\n    const {login} = useContext(AContext);\r\n    const [linkPawel, setLinkPawel] = useState(\"https://pomocnikprofesora.herokuapp.com/\");\r\n    //https://pomocnikprofesora.herokuapp.com/resultsStudent?login=student1\r\n    const [postPawel, setPostPawel] = useState(true);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', function(event) {\r\n          if (event.target === document.getElementById(\"form-consultation-a\") || event.target === document.getElementById(\"form-consultation-a--icon\")) {\r\n              document.getElementById(\"form-consultation\").submit();\r\n          }\r\n        }\r\n        )\r\n        \r\n      }, [])\r\n\r\n    function hand(){\r\n        props.handleRaiseHand();\r\n    }\r\n\r\n    return(\r\n    <div className=\"footer\">\r\n        {props.lobby ?\r\n        <div>\r\n        {admin && <label \r\n        htmlFor=\"tooglemenu\"\r\n        onClick={(e) => props.handlePopupLobby(e)}\r\n        className=\"tooltip footer--span-files\"\r\n        ><span className=\"tooltiptext tooltipfiles\" style={{width: 150+\"px\", marginLeft: -5 + \"%\"}}>Przeglądaj pliki</span>\r\n        <span aria-labelledby=\"jsx-a11y/accessible-emoji\" role=\"img\"><i className=\"material-icons\">insert_drive_file</i></span></label>\r\n        }\r\n        {(!admin && !postPawel) && <a href={linkPawel+\"resultsStudent?login=\"+login} target=\"_blank\"><label \r\n        htmlFor=\"tooglepawel\"\r\n        className=\"tooltip footer--span-files\"\r\n        ><span className=\"tooltiptext tooltipfiles\" style={{width: 150+\"px\", marginLeft: -5 + \"%\"}}>Moje dyżury</span>\r\n        <span aria-labelledby=\"jsx-a11y/accessible-emoji\" role=\"img\"><i className=\"material-icons\">question_answer</i></span></label></a>\r\n        }\r\n\r\n        {(!admin && postPawel) &&\r\n            <form method=\"post\" action={linkPawel+\"resultsStudent\"} target=\"_blank\" style={{width: \"60px\"}} id=\"form-consultation\">\r\n            <input type=\"text\" style={{display: \"none\"}} id=\"login\" name=\"login\" value={props.login}/>\r\n            <a>\r\n                <label \r\n                    id=\"form-consultation-a\"\r\n                    className=\"tooltip footer--span-files\"\r\n                >\r\n                    <span className=\"tooltiptext tooltipfiles\" style={{width: 150+\"px\", marginLeft: -5 + \"%\"}}>Moje dyżury</span>\r\n                    <span aria-labelledby=\"jsx-a11y/accessible-emoji\" role=\"img\"><i className=\"material-icons\" id=\"form-consultation-a--icon\">question_answer</i></span>\r\n                </label>\r\n            </a>\r\n        </form>\r\n        }\r\n\r\n            <Link to=\"/\">\r\n                <label \r\n                    htmlFor=\"homebutton\"\r\n                    className=\"tooltip footer--span-home\"\r\n                >\r\n                    <span className=\"tooltiptext\">Powrót do strony głównej</span>\r\n                    <span className=\"material-icons\">home</span>\r\n                </label>\r\n            </Link>\r\n\r\n        <label \r\n        htmlFor=\"tooglemenu\"\r\n        onClick={() => props.handleLogout()}\r\n        className=\"tooltip footer--span-logout\"\r\n        >{/*<span className=\"tooltiptext\">Wyloguj się</span>*/}\r\n        <span aria-labelledby=\"jsx-a11y/accessible-emoji\" role=\"img\">WYLOGUJ</span></label>\r\n        </div>\r\n        :\r\n        <div>        \r\n            <input \r\n                type=\"checkbox\" \r\n                id=\"tooglemenu\"\r\n                checked={ props.checkedMenu } \r\n                onChange={ props.handleChangeMenu } \r\n                />    \r\n            <label \r\n                htmlFor=\"tooglemenu\"\r\n                onMouseEnter={() => props.handleHoverMenu(true)}\r\n                onMouseLeave={() => props.handleHoverMenu(false)}\r\n                className=\"tooltip footer--span-menu\"\r\n                style={{position:\"absolute\", left: 0}}\r\n                >\r\n                    <span className=\"tooltiptext\">Menu</span>\r\n                <span aria-labelledby=\"jsx-a11y/accessible-emoji\" role=\"img\">&#9776;</span>\r\n            </label>\r\n\r\n            {props.roomAdmin &&\r\n            <input \r\n                type=\"checkbox\" \r\n                id=\"toogleiframeinputadmin\"\r\n                checked={ props.checkedIframeInputAdmin } \r\n                onChange={ props.handleChangeIframeInputAdmin } \r\n                />\r\n            }\r\n            {props.roomAdmin &&\r\n            <label \r\n                htmlFor=\"toogleiframeinputadmin\"\r\n                className=\"tooltip footer--span-http\"\r\n            >\r\n                <span className=\"tooltiptext\">URL</span>\r\n                <span aria-labelledby=\"jsx-a11y/accessible-emoji\" role=\"img\"><i className=\"material-icons\">http</i></span></label>\r\n            }\r\n            {(!props.roomAdmin && !postPawel) &&\r\n                <a href={linkPawel+\"zapisy?roomId=\"+props.id+\"&login=\"+props.login} target=\"_blank\"><label\r\n                    className=\"tooltip footer--span-consultation\"\r\n                >\r\n                <span className=\"tooltiptext tooltiptext--long\">Umów się na konsultację z {props.adminName}</span>\r\n                <span className=\"material-icons\">\r\n                question_answer\r\n                </span></label>\r\n                </a>\r\n            }\r\n\r\n            {(!props.roomAdmin && postPawel) &&\r\n                <form method=\"post\" action={linkPawel+\"zapisy\"} target=\"_blank\" style={{width: \"60px\"}} id=\"form-consultation\">\r\n                <input type=\"text\" style={{display: \"none\"}} id=\"roomId\" name=\"roomId\" value={props.id}/>\r\n                <input type=\"text\" style={{display: \"none\"}} id=\"login\" name=\"login\" value={props.login}/>\r\n                <a>\r\n                <label\r\n                    id=\"form-consultation-a\"\r\n                    className=\"tooltip footer--span-consultation\"\r\n                >\r\n                <span className=\"tooltiptext tooltiptext--long\">Umów się na konsultację z {props.adminName}</span>\r\n                <span className=\"material-icons\" id=\"form-consultation-a--icon\">\r\n                question_answer\r\n                </span></label></a>\r\n                </form>\r\n            }\r\n\r\n            {(props.roomAdmin && !postPawel)&&\r\n                <a href={linkPawel+\"dashboardTeacher?roomId=\"+props.id} target=\"_blank\"><label\r\n                    className=\"tooltip footer--span-consultation\"\r\n                >\r\n                <span className=\"tooltiptext tooltiptext--long\">Moje konsultacje</span>\r\n                <span className=\"material-icons\">\r\n                question_answer\r\n                </span></label>\r\n                </a>\r\n            }\r\n\r\n            {(props.roomAdmin && postPawel) &&\r\n                <form method=\"post\" action={linkPawel+\"dashboardTeacher\"} target=\"_blank\" style={{width: \"60px\"}} id=\"form-consultation\">\r\n                    <input type=\"text\" style={{display: \"none\"}} id=\"roomId\" name=\"roomId\" value={props.id}/>\r\n                    <a>\r\n                    <label\r\n                        id=\"form-consultation-a\"\r\n                        className=\"tooltip footer--span-consultation\"\r\n                    >\r\n                        <span className=\"tooltiptext tooltiptext--long\">Moje konsultacje</span>\r\n                        <span className=\"material-icons\" id=\"form-consultation-a--icon\">\r\n                            question_answer\r\n                        </span>\r\n                    </label>\r\n                    </a>\r\n                </form>\r\n            }\r\n\r\n            <input \r\n                type=\"checkbox\" \r\n                id=\"homebutton\"\r\n                />\r\n\r\n            {!props.roomAdmin &&\r\n                <a className=\"footer--span-lapka\" onClick={() => hand()}><label\r\n                    className={props.isHandRaised ? \"tooltip footer-hand--up\" : \"tooltip\"}\r\n                >\r\n                <span className=\"tooltiptext\">Zgłoś się</span>\r\n                <span className=\"material-icons\" style={{padding: \"0 25px\"}}>pan_tool</span></label>\r\n                </a>\r\n            }\r\n\r\n            <input \r\n                type=\"checkbox\" \r\n                id=\"tooglechat\"\r\n                checked={ props.checkedChat } \r\n                onChange={ props.handleChangeChat } \r\n                />\r\n            <label \r\n                htmlFor=\"tooglechat\"\r\n                onMouseEnter={() => props.handleHoverChat(true)}\r\n                onMouseLeave={() => props.handleHoverChat(false)}\r\n                className=\"tooltip footer--span-chat\"\r\n                style={{position:\"absolute\", right: 0}}\r\n            >\r\n                <span className=\"tooltiptext\">Chat</span>\r\n                <span aria-labelledby=\"jsx-a11y/accessible-emoji\" role=\"img\"><i className=\"material-icons\">chat</i>\r\n                {props.handCounter > 0 &&\r\n                                <span style={{position: \"relative\"}}>\r\n                                    <span style={{position:\"absolute\", right: \"-15px\", top: \"-2px\", zIndex: \"200\", fontSize: \"12px\", color: \"black\", fontSize: \"11px\", fontFamily: \"monospace\"}}>{props.handCounter}</span>\r\n                                    <span className=\"material-icons\" style={{position:\"absolute\", right: \"-18px\", top: \"-5px\", fontSize: \"18px\", color: \"gold\"}}>pan_tool</span>\r\n                                </span>\r\n                            }\r\n                </span>\r\n            </label>\r\n            \r\n        </div>\r\n    }\r\n    </div>\r\n    )\r\n} \r\n\r\nexport default Footer;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontendinz/src/components/gui/Footer.js b/frontendinz/src/components/gui/Footer.js
--- a/frontendinz/src/components/gui/Footer.js	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/frontendinz/src/components/gui/Footer.js	(date 1611749988935)
@@ -115,7 +115,7 @@
                 <a href={linkPawel+"zapisy?roomId="+props.id+"&login="+props.login} target="_blank"><label
                     className="tooltip footer--span-consultation"
                 >
-                <span className="tooltiptext tooltiptext--long">Umów się na konsultację z {props.adminName}</span>
+                <span className="tooltiptext tooltiptext--long">Umów się na konsultację z prowadzącym ten wykład</span>
                 <span className="material-icons">
                 question_answer
                 </span></label>
@@ -131,7 +131,7 @@
                     id="form-consultation-a"
                     className="tooltip footer--span-consultation"
                 >
-                <span className="tooltiptext tooltiptext--long">Umów się na konsultację z {props.adminName}</span>
+                <span className="tooltiptext tooltiptext--long">Umów się na konsultację z prowadzącym ten wykład</span>
                 <span className="material-icons" id="form-consultation-a--icon">
                 question_answer
                 </span></label></a>
Index: API/UsersByRoom.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\r\n\t\trequire_once __DIR__.\"/../database/DatabaseConnection.php\";\r\n\r\n        $roomId = $_GET[\"roomId\"];\r\n\t\t\t\t\r\n\t\t//$token = $_GET[\"token\"];\r\n//USUN GDY WSZYSCY DODDZĄ TOKEN I ODKOMENTUJ TO Z GÓRY\r\n\t\tif(isset($_GET['token'])) { \r\n\t\t\t$token = $_GET[\"token\"];\r\n\t\t\r\n\t\t} else {\r\n\t\t\t$token = \"f513297c48cbd3d7400538e747ea9c5a\";\r\n\t\t}\r\n// \t\t\r\n\t\tif($token == \"f513297c48cbd3d7400538e747ea9c5a\"){\r\n\t\t$DB = new DatabaseConnection();\r\n        $DB->connect();\r\n            if( $row = $DB->getRoom( htmlspecialchars($roomId) ) ){\r\n\t\t\t\t$login = $row['admin'];\r\n\t\t\t\t\r\n\t\t\t\tif( $row2 = $DB->getUserByLogin( htmlspecialchars($login) ) ){\r\n\t\t\t\t\t if (!isset($user)) { \r\n\t\t\t\t\t$user = new stdClass();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                $user->login = $row2['login'];\r\n                $user->name = $row2['name'];\r\n                $user->surname = $row2['surname'];\t\t\r\n\t\t\t\t$user->email = $row2['email'];\r\n\t\t\t\t$user->token = $row2['token'];\r\n\t\t\t\t$DB->closeConnection();\r\n\t\t\t\t\r\n\t\t\t\techo json_encode($user);\r\n            }else{\r\n               $DB->closeConnection();\r\n                return false;\r\n            }\r\n\t\t\t\t\r\n\t\t\t\t\r\n            }else{\r\n               $DB->closeConnection();\r\n                return false;\r\n            }\r\n}else { return false; }\r\n} else { return false; }\r\n\r\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/UsersByRoom.php b/API/UsersByRoom.php
--- a/API/UsersByRoom.php	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/API/UsersByRoom.php	(date 1611745507517)
@@ -3,19 +3,16 @@
 		require_once __DIR__."/../database/DatabaseConnection.php";
 
         $roomId = $_GET["roomId"];
-				
-		//$token = $_GET["token"];
-//USUN GDY WSZYSCY DODDZĄ TOKEN I ODKOMENTUJ TO Z GÓRY
-		if(isset($_GET['token'])) { 
-			$token = $_GET["token"];
+		
+		$authToken = $_GET["token"];
 		
-		} else {
-			$token = "f513297c48cbd3d7400538e747ea9c5a";
-		}
-// 		
-		if($token == "f513297c48cbd3d7400538e747ea9c5a"){
 		$DB = new DatabaseConnection();
         $DB->connect();
+		
+		$databaseToken = $DB->getRoomAuthToken( $roomId );
+		if($authToken == $databaseToken ){
+		
+		
             if( $row = $DB->getRoom( htmlspecialchars($roomId) ) ){
 				$login = $row['admin'];
 				
@@ -42,7 +39,9 @@
                $DB->closeConnection();
                 return false;
             }
-}else { return false; }
+}else { 
+//TODO NAME I SURNAME
+return false; }
 } else { return false; }
 
 ?>
\ No newline at end of file
Index: API/UsersByLogin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\r\n\t\trequire_once __DIR__.\"/../database/DatabaseConnection.php\";\r\n\r\n        $login = $_GET[\"login\"];\r\n\t\t\r\n\t\t//$token = $_GET[\"token\"];\r\n//USUN GDY WSZYSCY DODDZĄ TOKEN I ODKOMENTUJ TO Z GÓRY\r\n\t\tif(isset($_GET['token'])) { \r\n\t\t\t$token = $_GET[\"token\"];\r\n\t\t\r\n\t\t} else {\r\n\t\t\t$token = \"f513297c48cbd3d7400538e747ea9c5a\";\r\n\t\t}\r\n// \t\t\r\n\t\tif($token == \"f513297c48cbd3d7400538e747ea9c5a\")\r\n\t\t{\r\n\r\n\t\t$DB = new DatabaseConnection();\r\n        $DB->connect();\r\n        if( $row2 = $DB->getUserByLogin( htmlspecialchars($login) ) ){\r\n\t\t\tif (!isset($user)) { \r\n\t\t\t\t$user = new stdClass();\r\n\t\t\t}\r\n\t\t\t\t\r\n                $user->login = $row2['login'];\r\n                $user->name = $row2['name'];\r\n                $user->surname = $row2['surname'];\t\t\r\n\t\t\t\t$user->email = $row2['email'];\r\n\t\t\t\t$user->token = $row2['token'];\r\n\t\t\t\t$DB->closeConnection();\r\n\t\t\t\t\r\n\t\t\t\techo json_encode($user);\r\n            }else{\r\n               $DB->closeConnection();\r\n                return false;\r\n            }\r\n\t\t} else { return false; } \r\n} else { return false; }\r\n\r\n\r\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/UsersByLogin.php b/API/UsersByLogin.php
--- a/API/UsersByLogin.php	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/API/UsersByLogin.php	(date 1611747449168)
@@ -4,18 +4,15 @@
 
         $login = $_GET["login"];
 		
-		//$token = $_GET["token"];
-//USUN GDY WSZYSCY DODDZĄ TOKEN I ODKOMENTUJ TO Z GÓRY
-		if(isset($_GET['token'])) { 
-			$token = $_GET["token"];
+		$authToken = $_GET["token"];
 		
-		} else {
-			$token = "f513297c48cbd3d7400538e747ea9c5a";
-		}
-// 		
-		if($token == "f513297c48cbd3d7400538e747ea9c5a")
-		{
-
+ 	
+		$DB = new DatabaseConnection();
+        $DB->connect();
+		
+		$databaseToken = $DB->getLoginAuthToken( $login );
+		if($authToken == $databaseToken ){
+		
 		$DB = new DatabaseConnection();
         $DB->connect();
         if( $row2 = $DB->getUserByLogin( htmlspecialchars($login) ) ){
@@ -35,7 +32,9 @@
                $DB->closeConnection();
                 return false;
             }
-		} else { return false; } 
+		} else { 
+		//TODO NAME I SURNAME
+		return false; } 
 } else { return false; }
 
 
Index: SERVER/Infrastructure/WebSocket.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n    // Written according to RFC 6455\r\n    // https://tools.ietf.org/html/rfc6455\r\n    // php.ini uncomment:   extension=sockets\r\n    // probably later uncomment:    extension=openssl\r\n\r\n    require_once __DIR__.\"/../Application/LoggerService.php\";\r\n    require_once __DIR__.\"/../Application/ClientService.php\";\r\n    require_once __DIR__.\"/../Application/MessageService.php\";\r\n    require_once __DIR__.\"/../../Config.php\";\r\n\r\n    require_once __DIR__.\"/../ValueObjects/MessageVO.php\";\r\n\r\n    // First octet -> flags with OPCODE\r\n    // abstract class OPCODE{\r\n    //     const TEXT = 129;   //1000 0001 (FIN RSV1 RSV2 RSV3 4*opcode) TEXT frame opcode-%x1\r\n    //     const CLOSE = 136;  //1000 1000 (FIN RSV1 RSV2 RSV3 4*opcode) CLOSE opcode-%x8\r\n    //     const PING = 137;   //1000 1001 (FIN RSV1 RSV2 RSV3 4*opcode) PING opcode-%x9\r\n    //     const PONG = 138;   //1000 1010 (FIN RSV1 RSV2 RSV3 4*opcode) PONG opcode-%xA\r\n    // }\r\n\r\n    class WebSocket{\r\n        public $running = true;\r\n\r\n        private $masterSocket;\r\n        private $clientSockets = array();\r\n\r\n        private $sleepCounter = 1;\r\n        private $sleepInterval = 0.25*1000000;   //Seconds * 1.000.000 (microseconds 1/mil)\r\n        private $pingInterval = 5;  //Seconds\r\n\r\n        private $loggerService;\r\n        private $clientService;\r\n        private $messageService;\r\n        private $roomService;\r\n\r\n        function __construct($ip, $port, LoggerService $logger, ClientService $client, MessageService $message, RoomService $room){\r\n            $this->loggerService = $logger;\r\n            $this->clientService = $client;\r\n            $this->messageService = $message;\r\n            $this->roomService = $room;\r\n\r\n            $context = stream_context_create();\r\n            // stream_context_set_option($context, 'ssl', 'local_cert', \"/etc/letsencrypt/live/s153070.projektstudencki.pl/fullchain.pem\");\r\n            // stream_context_set_option($context, 'ssl', 'local_pk', \"/etc/letsencrypt/live/s153070.projektstudencki.pl/privkey.pem\");\r\n\r\n            // stream_context_set_option($context, 'ssl', 'local_cert', CONFIG::CERT_FULL_CHAIN_PATH);\r\n            // stream_context_set_option($context, 'ssl', 'local_pk', CONFIG::CERT_PRIVATE_KEY_PATH);\r\n            // stream_context_set_option($context, 'ssl', 'allow_self_signed', false);\r\n            // stream_context_set_option($context, 'ssl', 'verify_peer', false);\r\n\r\n            //$this->masterSocket = stream_socket_server(\"tls://$ip:$port\", $errno, $errstr, STREAM_SERVER_BIND|STREAM_SERVER_LISTEN, $context);\r\n            $this->masterSocket = stream_socket_server(\"tcp://$ip:$port\", $errno, $errstr, STREAM_SERVER_BIND|STREAM_SERVER_LISTEN, $context);\r\n            if($this->masterSocket){\r\n                $address = stream_socket_get_name($this->masterSocket, FALSE);\r\n                $this->loggerService->log(\"Server socket: $this->masterSocket\");\r\n                $this->loggerService->log(\"Socket listening on $address\");\r\n                //$this->main();\r\n            }else{\r\n                $this->loggerService->error(\"Socket could not be opened\");\r\n            }\r\n        }\r\n\r\n        function __destruct(){\r\n            if($this->masterSocket){\r\n                fclose($this->masterSocket);\r\n            }\r\n            $this->loggerService->log(\"Socket closed\");\r\n        }\r\n\r\n        private function getCookies($httpCookie){\r\n            $cookies = array();\r\n            $cookiesTMP = explode(\"; \", $httpCookie);\r\n            foreach ($cookiesTMP as $key => $value) {\r\n                $tmp = explode(\"=\", trim($value));\r\n                $cookies[$tmp[0]] = $tmp[1];\r\n            }\r\n            return $cookies;\r\n        }\r\n\r\n        private function handshake($socket, $message){\r\n            $GUID = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\r\n            $HTTPdata = array();\r\n            $HTTPlines = explode(\"\\r\\n\", trim($message));\r\n\r\n            foreach($HTTPlines as $key => $line){\r\n                if($key>0){\r\n                    $tmp = explode(\": \", trim($line));\r\n                    $HTTPdata[$tmp[0]] = $tmp[1];\r\n                }\r\n            }\r\n            \r\n            $sha = sha1($HTTPdata['Sec-WebSocket-Key'].$GUID);\r\n            $shaArray = str_split($sha, 2);\r\n            $hexArray = array_map('hexdec', $shaArray);\r\n            $chrArray = array_map('chr', $hexArray);\r\n            $key = implode($chrArray);\r\n            $keyHash = base64_encode($key);\r\n            $response = \"HTTP/1.1 101 Switching Protocols\\r\\n\"\r\n                        .\"Upgrade: websocket\\r\\n\"\r\n                        .\"Connection: Upgrade\\r\\n\"\r\n                        .\"Sec-Websocket-Accept: $keyHash\\r\\n\\r\\n\";\r\n\r\n            //Send handshake response to client\r\n            $this->sendMessageToSocket($socket, $response);\r\n            \r\n            $cookies = $this->getCookies($HTTPdata['Cookie']);\r\n            return $cookies['token'];\r\n        }\r\n\r\n        public function destroySocketByID($socketID){\r\n            //print_r($this->clientSockets);\r\n            $this->clientSockets[(string)$socketID] = null;\r\n            unset($this->clientSockets[(string)$socketID]);\r\n            //print_r($this->clientSockets);\r\n        }\r\n\r\n        private function sendMessageToSocket($socket, $msg){\r\n            return fwrite($socket, $msg);\r\n        }\r\n\r\n        private function pingSocket($socket){\r\n            //$this->loggerService->log(\"Ping: $socket\");\r\n            $this->loggerService->logToConsole(\"Ping: $socket\");\r\n            $msg = $this->messageService->createPingSignalMessage();\r\n            return $this->sendMessageToSocket($socket, $msg->encode());\r\n        }\r\n\r\n        private function sendMessageToClients(array $client, $msg, $except = null){\r\n            $back = $this->clientSockets;\r\n            $back[$except] = null;\r\n            unset($back[$except]);\r\n            foreach ($client as $value) {\r\n                $socketID = $value->getSocketID();\r\n                if(isset($back[$socketID])){\r\n                    $socket = $back[$socketID];\r\n                    $this->sendMessageToSocket($socket, $msg);\r\n                }else{\r\n                    $this->loggerService->warn(\"Socket not found when sending message\");\r\n                }\r\n            }\r\n        }\r\n\r\n        private function parseMessageFrom(Client $client, Message $msg){\r\n            if(!isset($client) || !$client->getRoom()){\r\n                $this->loggerService->warn(\"Client not defined\");\r\n                return;\r\n            }\r\n\r\n            $room = $client->getRoom();\r\n            $roomClients = $room->getClients();\r\n            $text = $msg->getType();\r\n\r\n            switch ($text) {\r\n                case OPCODE::TEXT:\r\n                    $decodedJSON = $msg->getText();\r\n                    $type = $decodedJSON['type'];\r\n\r\n                    switch($type){\r\n                        case 'chat':\r\n                            if(!$client->isMuted()){\r\n                                $decodedJSON['name'] = $client->getName().\" \".$client->getSurname().\" (\".$client->getLogin().\")\";\r\n                                $encodedJSON = $decodedJSON;\r\n                                $msg = $this->messageService->createTextMessage($client, $encodedJSON);\r\n\r\n                                $msgVO = new MessageVO($decodedJSON['messagetype'], $msg->getTime(), $msg->getText()['chat'], $client->getLogin(), $room->getRoomID());\r\n                                DatabaseService::getInstance()->addMessageToChatHistory($msgVO);\r\n\r\n                                $this->sendMessageToClients($roomClients, $msg->encode());\r\n                            }else{\r\n                                $muted = [\r\n                                    \"type\" => \"chat\",\r\n                                    \"chat\" => \"Zostałeś zablokowany!\",\r\n                                    \"name\" => \"SERVER\"\r\n                                ];\r\n                                $msg = $this->messageService->createTextMessage($client, $muted);\r\n                                //$this->sendMessageToSocket(null, $msg->encode());\r\n                                $this->sendMessageToClients([$client], $msg->encode());\r\n                            }\r\n                            break;\r\n                        \r\n                        case 'event':\r\n                            if($client->isAdmin()){\r\n                                if($decodedJSON['event']==\"redirection\"){\r\n                                    $urlde = urldecode($decodedJSON['url']);\r\n                                    if($urlde != \"\" && $urlde != \"http://\" && $urlde != \"https://\"){\r\n                                        $this->sendMessageToClients($roomClients, $msg->encode(), $client->getSocketID());\r\n                                        $room->addUrlToHistory($decodedJSON['url']);\r\n                                        DatabaseService::getInstance()->addUrlToHistory($decodedJSON['url'], $client->getLogin());\r\n                                        $room->setUrl($decodedJSON['url']);\r\n                                        $this->sendUrlHistoryToSocket($this->clientSockets[$client->getSocketID()], $room);\r\n                                        $this->loggerService->log(\"Room: \".$room->getRoomName().\" \\tURL changed: \".$room->getUrl());\r\n                                    }\r\n                                }\r\n                                if($decodedJSON['event']==\"scroll\"){\r\n                                    $this->sendMessageToClients($roomClients, $msg->encode(), $client->getSocketID());\r\n                                    $room->setScrollPositionX($decodedJSON['x']);\r\n                                    $room->setScrollPositionY($decodedJSON['y']);\r\n                                    $this->loggerService->log(\"Room: \".$room->getRoomName().\" \\tScroll changed: \".$room->getScrollPositionX().\" | \".$room->getScrollPositionY());\r\n                                }\r\n                            }\r\n                            $this->loggerService->log(\"Room: \".$room->getRoomName().\" event: \".$decodedJSON[$type]);\r\n                            break;\r\n                        case 'mute':\r\n                            if($client->isAdmin()){\r\n                                $clientToMute = $room->getClientByLogin($decodedJSON['login']);\r\n                                if($clientToMute != null && $room->getAdminID() != $clientToMute->getLogin()){\r\n                                    $clientToMute->mute();\r\n                                    $this->sendClientsToAllInRoom($room);\r\n                                }\r\n                            }\r\n                            break;\r\n\r\n                        case 'hand':\r\n                            $clientToHand = $client;\r\n                            if($clientToHand != null){\r\n                                $clientToHand->hand();\r\n                                $this->sendClientsToAllInRoom($room);\r\n\r\n                                if($clientToHand->hasHand()){\r\n                                    $msg = $this->messageService->createHandRaiseMessage(true);\r\n                                    $this->sendMessageToClients([$clientToHand], $msg->encode());\r\n                                }else{\r\n                                    $msg = $this->messageService->createHandRaiseMessage(false);\r\n                                    $this->sendMessageToClients([$clientToHand], $msg->encode());\r\n                                }\r\n                            }else{\r\n                                $msg = $this->messageService->createHandRaiseMessage(false);\r\n                                $this->sendMessageToClients([$clientToHand], $msg->encode());\r\n                            }\r\n                            break;\r\n\r\n                        default:\r\n                            $this->loggerService->warn(\"Undefined JSON type received: $type\");\r\n                            break;\r\n                    }\r\n                    break;\r\n                \r\n                case OPCODE::CLOSE:\r\n                    $this->destroySocketByID($client->getSocketID());\r\n                    $this->loggerService->log(\"Client: \".$client->getLogin().\" left room: \".$room->getRoomName().\" (\".$room->getRoomID().\")\");\r\n                    $this->clientService->destroyClientBySocketID($client->getSocketID());\r\n                    $this->sendClientsToAllInRoom($room);\r\n                    break;\r\n\r\n                case OPCODE::PING:\r\n                    break;\r\n                \r\n                case OPCODE::PONG:\r\n                    $this->loggerService->logToConsole(\"Pong from: \".$client->getSocketID());\r\n                    break;\r\n\r\n                default:\r\n                    $this->loggerService->warn(\"Undefined message type received\");\r\n                    break;\r\n            }\r\n        }\r\n\r\n        private function sendClientsToAllInRoom(Room $room){\r\n            if(!isset($room)){\r\n                $this->loggerService->warn(\"Undefined variable \\$room\");\r\n                return;\r\n            }\r\n\r\n            $list = array();\r\n            $roomClients = $room->getClients();\r\n\r\n            foreach($roomClients as $item){\r\n                $list[] = [\r\n                    \"login\" => $item->getLogin(),\r\n                    \"name\" => $item->getName().\" \".$item->getSurname().\" (\".$item->getLogin().\")\",\r\n                    \"permission\" => ($item->isMuted()) ? false : true,\r\n                    \"hand\" => ($item->hasHand()) ? true : false\r\n                ];\r\n            }\r\n\r\n            $clientsList = [\r\n                \"type\" => \"updatelist\",\r\n                \"clients\" => $list\r\n            ];\r\n            //createMessage($author, $type, $text){\r\n            $msg = $this->messageService->createMessage(null, OPCODE::TEXT, $clientsList);\r\n\r\n            $this->sendMessageToClients($roomClients, $msg->encode());\r\n        }\r\n\r\n        private function sendChatHistoryToSocket($socket, $hist){\r\n            $clearMSG = $this->messageService->createClearChatMessage();\r\n            $this->sendMessageToSocket($socket, $clearMSG->encode());\r\n\r\n            foreach ($hist as $value) {\r\n                $this->sendMessageToSocket($socket, $value->encode());\r\n            }\r\n        }\r\n\r\n        private function sendUrlHistoryToSocket($socket, $room){\r\n            $hist = $this->roomService->getUrlHistoryAsArray($room->getRoomID());\r\n            $list = array();\r\n            foreach ($hist as $value) {\r\n                //print_r(parse_url(urldecode($value)));\r\n                $list[] = [\r\n                    \"title\" => parse_url(urldecode($value))['host'],\r\n                    //\"title\" => $value,\r\n                    \"link\" => urldecode($value),\r\n                    \"date\" => \"placeholder\"\r\n                ];\r\n            }\r\n            $historyList = [\r\n                \"type\" => \"updatehistory\",\r\n                \"history\" => $list\r\n            ];\r\n\r\n            $msg = $this->messageService->createMessage(null, OPCODE::TEXT, $historyList);\r\n            $this->sendMessageToSocket($socket, $msg->encode());\r\n        }\r\n\r\n        private function sendStartInfoToSocket($socket){\r\n            $client = $this->clientService->getClientBySocketID((string)$socket);\r\n            $room = $client->getRoom();\r\n            $roomVO = $room->getRoomVO();\r\n            \r\n            $auth = [\r\n                \"type\" => \"auth\",\r\n                \"auth\" => \"true\"\r\n            ];\r\n            $url = [\r\n                \"type\" => \"event\",\r\n                \"event\" => \"redirection\",\r\n                \"url\" => $roomVO->url\r\n            ];\r\n            $scroll = [\r\n                \"type\" => \"event\",\r\n                \"event\" => \"scroll\",\r\n                \"x\" => $roomVO->scrollX,\r\n                \"y\" => $roomVO->scrollY\r\n            ];\r\n            $info = [\r\n                \"type\" => \"info\",\r\n                \"info\" => \"room\",\r\n                \"name\" => $roomVO->roomName,\r\n                \"admin\" => $roomVO->adminID\r\n            ];\r\n            $authMSG = $this->messageService->createMessage(null, OPCODE::TEXT, $auth);\r\n            $urlMSG = $this->messageService->createMessage(null, OPCODE::TEXT, $url);\r\n            $scrollMSG = $this->messageService->createMessage(null, OPCODE::TEXT, $scroll);\r\n            $infoMSG = $this->messageService->createMessage(null, OPCODE::TEXT, $info);\r\n            $this->sendMessageToSocket($socket, $authMSG->encode());\r\n            $this->sendMessageToSocket($socket, $urlMSG->encode());\r\n            $this->sendMessageToSocket($socket, $scrollMSG->encode());\r\n            $this->sendMessageToSocket($socket, $infoMSG->encode());\r\n            $this->sendClientsToAllInRoom($room);\r\n            //$this->sendMessageToSocket($socket, $this->roomService->getMessageHistoryAsTextArray());\r\n            $msgHistArray = $this->roomService->getMessageHistoryAsArray($room->getRoomID());\r\n            $this->sendChatHistoryToSocket($socket, $msgHistArray);\r\n\r\n            if($client->isAdmin()){\r\n                $this->sendUrlHistoryToSocket($socket, $room);\r\n            }\r\n            \r\n            //$msgHist = $this->messageService->createMessage(null, OPCODE::TEXT, $msgHistArray);\r\n            //$this->sendMessageToSocket($socket, $msgHist->encode());\r\n        }\r\n\r\n        private function handleNewClient($clientSocket){\r\n            $address = stream_socket_get_name($clientSocket, TRUE);\r\n            $this->loggerService->log(\"New connection from: $address\");\r\n\r\n            $msg = fread($clientSocket, Config::MAX_BUFFER);\r\n            $token = $this->handshake($clientSocket, $msg);\r\n            \r\n            if($this->clientService->createClient((string)$clientSocket, $token)){\r\n                $this->clientSockets[(string)$clientSocket] = $clientSocket;\r\n                $this->sendStartInfoToSocket($clientSocket);\r\n            }else{\r\n                $msg = $this->messageService->createCloseSignalMessage();\r\n                $this->sendMessageToSocket($clientSocket, $msg->encode());\r\n            }\r\n        }\r\n\r\n        public function main(){\r\n            while($this->running == true){\r\n                $read = array_merge([$this->masterSocket], $this->clientSockets);\r\n                stream_select($read, $write, $except, 0, 1);\r\n\r\n                // If master server socket is in selected sockets array, then there is a new connection incoming\r\n                if(in_array($this->masterSocket, $read)){\r\n                    $clientSocket = stream_socket_accept($this->masterSocket);\r\n                    $this->handleNewClient($clientSocket);\r\n                    array_splice($read, 0, 1);\r\n                }\r\n\r\n                // Reads incoming messages\r\n                foreach ($read as $id => $clientSocket) {\r\n                    if($data = fread($clientSocket, Config::MAX_BUFFER)){\r\n                        $messageAuthor = $this->clientService->getClientBySocketID((string)$clientSocket);\r\n                        if(!empty($messageAuthor)){\r\n                            $message = $this->messageService->createMessageFromIncomingData($messageAuthor, $data);\r\n                            if($message->getType() != OPCODE::PING && $message->getType() != OPCODE::PONG){\r\n                                $this->loggerService->log(\"New message from: \".$messageAuthor->getLogin().\"(\".$messageAuthor->getSocketID().\") | Message: \".json_encode($message->getText()));\r\n                            }                            \r\n\r\n                            $this->parseMessageFrom($messageAuthor, $message);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if($this->sleepCounter > $this->pingInterval/$this->sleepInterval*1000000){\r\n                    foreach ($this->clientSockets as $socket) {\r\n                        $client = $this->clientService->getClientBySocketID((string)$socket);\r\n                        $room = $client->getRoom();\r\n                        if(!$room){\r\n                            $msg = $this->messageService->createCloseSignalMessage();\r\n                            $this->sendMessageToSocket($socket, $msg->encode());\r\n                        }\r\n                        if(!$this->pingSocket($socket) || !$room){\r\n                            $this->destroySocketByID($client->getSocketID());\r\n                            $this->loggerService->log(\"Connection timeout: \\tClient: \".$client->getLogin());\r\n                            $this->clientService->destroyClientBySocketID($client->getSocketID());\r\n                        }\r\n                    }\r\n                    foreach ($this->roomService->getAllRooms() as $room) {\r\n                        $this->sendClientsToAllInRoom($room);\r\n                    }\r\n                    $this->sleepCounter = 1;\r\n                }\r\n                usleep($this->sleepInterval);\r\n                $this->sleepCounter++;\r\n            }\r\n        }\r\n    }\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SERVER/Infrastructure/WebSocket.php b/SERVER/Infrastructure/WebSocket.php
--- a/SERVER/Infrastructure/WebSocket.php	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/SERVER/Infrastructure/WebSocket.php	(date 1611420232209)
@@ -181,19 +181,27 @@
                         
                         case 'event':
                             if($client->isAdmin()){
+                                $this->sendMessageToClients($roomClients, $msg->encode(), $client->getSocketID());
                                 if($decodedJSON['event']=="redirection"){
                                     $urlde = urldecode($decodedJSON['url']);
                                     if($urlde != "" && $urlde != "http://" && $urlde != "https://"){
-                                        $this->sendMessageToClients($roomClients, $msg->encode(), $client->getSocketID());
                                         $room->addUrlToHistory($decodedJSON['url']);
                                         DatabaseService::getInstance()->addUrlToHistory($decodedJSON['url'], $client->getLogin());
                                         $room->setUrl($decodedJSON['url']);
                                         $this->sendUrlHistoryToSocket($this->clientSockets[$client->getSocketID()], $room);
                                         $this->loggerService->log("Room: ".$room->getRoomName()." \tURL changed: ".$room->getUrl());
                                     }
+                                    // else{
+                                    //     $msg = [
+                                    //         "type" => "event",
+                                    //         "event" => "redirection",
+                                    //         "url" => $room->getUrl()
+                                    //     ];
+                                    //     $msg = $this->messageService->createTextMessage($client, $msg);
+                                    //     $this->sendMessageToSocket($this->clientSockets[$client->getSocketID()], $msg->encode());
+                                    // }
                                 }
                                 if($decodedJSON['event']=="scroll"){
-                                    $this->sendMessageToClients($roomClients, $msg->encode(), $client->getSocketID());
                                     $room->setScrollPositionX($decodedJSON['x']);
                                     $room->setScrollPositionY($decodedJSON['y']);
                                     $this->loggerService->log("Room: ".$room->getRoomName()." \tScroll changed: ".$room->getScrollPositionX()." | ".$room->getScrollPositionY());
@@ -206,27 +214,22 @@
                                 $clientToMute = $room->getClientByLogin($decodedJSON['login']);
                                 if($clientToMute != null && $room->getAdminID() != $clientToMute->getLogin()){
                                     $clientToMute->mute();
+                                    // if($clientToMute->isMuted()){
+                                    //     $clientToMute->unMute();
+                                    // }else{
+                                    //     $clientToMute->mute();
+                                    // }
                                     $this->sendClientsToAllInRoom($room);
                                 }
                             }
                             break;
 
                         case 'hand':
+                            // $clientToHand = $room->getClientByLogin($decodedJSON['login']);
                             $clientToHand = $client;
                             if($clientToHand != null){
                                 $clientToHand->hand();
                                 $this->sendClientsToAllInRoom($room);
-
-                                if($clientToHand->hasHand()){
-                                    $msg = $this->messageService->createHandRaiseMessage(true);
-                                    $this->sendMessageToClients([$clientToHand], $msg->encode());
-                                }else{
-                                    $msg = $this->messageService->createHandRaiseMessage(false);
-                                    $this->sendMessageToClients([$clientToHand], $msg->encode());
-                                }
-                            }else{
-                                $msg = $this->messageService->createHandRaiseMessage(false);
-                                $this->sendMessageToClients([$clientToHand], $msg->encode());
                             }
                             break;
 
Index: SERVER/Application/MessageService.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n    require_once __DIR__.\"/../Domain/Message.php\";\r\n\r\n    class MessageService{\r\n        private static $instance;\r\n\r\n        private $loggerService;\r\n\r\n        function __construct($logger){\r\n            self::$instance = $this;\r\n\r\n            $this->loggerService = $logger;\r\n        }\r\n\r\n        public static function getInstance(){\r\n            return self::$instance;\r\n        }\r\n\r\n        public function createMessage($author, $type, $text){\r\n            $message = new Message($type, $author, null, $text);\r\n            return $message;\r\n        }\r\n\r\n        public function createTextMessage($author, $text){\r\n            $msg = new Message(OPCODE::TEXT, $author, null, $text);\r\n            $this->addMessageToHistory($msg);\r\n            return $msg;\r\n        }\r\n\r\n        public function createCloseSignalMessage(){\r\n            $msg = new Message(OPCODE::CLOSE, null, null, null);\r\n            return $msg;\r\n        }\r\n\r\n        public function createPingSignalMessage(){\r\n            $msg = new Message(OPCODE::PING, null, null, null);\r\n            return $msg;\r\n        }\r\n\r\n        public function createPongSignalMessage(){\r\n            $msg = new Message(OPCODE::PONG, null, null, null);\r\n            return $msg;\r\n        }\r\n\r\n        public function createMessageFromIncomingData($author, $data){\r\n            $message = new Message(null, $author, null, null);\r\n            $message->decode($data);\r\n            return $message;\r\n        }\r\n\r\n        public function createClearChatMessage(){\r\n            $data = [\r\n                \"type\" => \"oldchat\"\r\n            ];\r\n            $msg = new Message(OPCODE::TEXT, null, null, $data);\r\n            return $msg;\r\n        }\r\n\r\n        public function createHandRaiseMessage(bool $state){\r\n            $data = [\r\n                \"type\" => \"handraise\",\r\n                \"state\" => $state\r\n            ];\r\n            $msg = new Message(OPCODE::TEXT, null, null, $data);\r\n            return $msg;\r\n        }\r\n\r\n        private function addMessageToHistory(Message $msg){\r\n            $client = $msg->getAuthor();\r\n            if($client){\r\n                $room = $client->getRoom();\r\n                $room->addMessageToHistory($msg);\r\n            }\r\n        }\r\n    }\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SERVER/Application/MessageService.php b/SERVER/Application/MessageService.php
--- a/SERVER/Application/MessageService.php	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/SERVER/Application/MessageService.php	(date 1611420232203)
@@ -56,15 +56,6 @@
             return $msg;
         }
 
-        public function createHandRaiseMessage(bool $state){
-            $data = [
-                "type" => "handraise",
-                "state" => $state
-            ];
-            $msg = new Message(OPCODE::TEXT, null, null, $data);
-            return $msg;
-        }
-
         private function addMessageToHistory(Message $msg){
             $client = $msg->getAuthor();
             if($client){
Index: files/uploads/PdfToHtml.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once(__DIR__ . '/vendor/autoload.php');\r\n\r\n\r\nclass PdfToHtml {\r\n\r\n    private $fileName;\r\n    private $name;\r\n\tprivate $extension;\r\n\tprivate $folderPath = \"/var/www/html/files/uploads/\";\r\n\t\r\n\r\n    function __construct( $fileName ){\r\n\r\n        $this->fileName = $fileName;\r\n\t\t$this->name = explode( \".\", $fileName )[0];\r\n\t\t$this->extension = explode( \".\", $fileName )[1];\r\n\t\r\n\t}\r\n\r\n\r\n\r\n    function translateFromPresentation(){\r\n\r\n\tif( \r\n\t$this->extension == \"ppt\" ||\r\n\t$this->extension == \"pptx\" ||\r\n\t$this->extension == \"odp\" ||\r\n\t$this->extension == \"uop\" \r\n\t){\r\n\t\t// Configure API key authorization: Apikey\r\n\t\t$config = Swagger\\Client\\Configuration::getDefaultConfiguration()->setApiKey('Apikey', 'c019885c-ae0d-4f7d-a765-5e82d2530d1e');\r\n\r\n\t\t$apiInstance = new Swagger\\Client\\Api\\ConvertDocumentApi(\r\n        \r\n\t\tnew GuzzleHttp\\Client(),\r\n\t\t$config\r\n\t\t);\r\n\t\r\n\t\ttry {\r\n\t\t\t$result = $apiInstance->convertDocumentPptxToPdf( \"../uploads/\".$this->fileName);\r\n\t\t\tprint_r($result);\r\n\r\n\t\t\techo $myfile = fopen( \"../uploads/\".$this->name.\".pdf\", \"c+\" ) or die(\"Unable to open file!\");\r\n\t\t\techo fwrite($myfile, $result);\r\n\t\t\tfclose($myfile);\r\n\t\t\t\r\n\t\t\t$this->fileName = $this->name.\".pdf\";\r\n\t\t\t$this->extension = \"pdf\";\r\n\t\t} catch (Exception $e) {\r\n\t\t\techo 'Exception when calling ConvertDocumentApi->convertDocumentPptxToPdf: ', $e->getMessage(), PHP_EOL;\r\n\t\t}\r\n\t}\r\n\r\n    }\r\n\r\n\r\n    function translate(){\r\n\tif( $this->extension == \"pdf\" ){\r\n\t\t$this->createFolder();\r\n\t\t$this->moveToFolder();\r\n\t\t$this->convertPdf();\r\n\r\n\t\treturn $this->name.\"/\".$this->name.\"-html.html\"; \r\n    } \r\n\telse {\r\n\t\treturn $this->fileName;\r\n\t\t}\r\n\t}\r\n\t\r\n    function remove(){\r\n\tif( \r\n\t$this->extension == \"ppt\" ||\r\n\t$this->extension == \"pptx\" ||\r\n\t$this->extension == \"odp\" ||\r\n\t$this->extension == \"uop\" ||\r\n\t$this->extension == \"pdf\" \r\n\t){\r\n\t\t$nameToDelete = str_replace(' ', '\\ ', $this->name );\r\n\t\t$cmd = \"rm -rf \".$this->folderPath.$nameToDelete;\r\n    \tshell_exec( $cmd );\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n    }\r\n\r\n\r\n\tfunction createFolder(){\r\n\t\t$cmdMakeDir = \"mkdir -m 777 \".$this->folderPath.$this->name;\r\n\t\techo $cmdMakeDir.\"<br>\";\r\n\t\techo shell_exec( $cmdMakeDir );\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction moveToFolder(){\r\n\t\t$cmdMoveFileFrom = $this->folderPath.$this->fileName;\r\n\t\t$cmdMoveFileTo = $this->folderPath.$this->name.\"/\".$this->fileName;\r\n\t\techo $cmdMoveFileFrom.\"<br>\";\r\n\t\techo $cmdMoveFileTo.\"<br>\";\r\n\t\techo rename( $cmdMoveFileFrom, $cmdMoveFileTo );\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction convertPdf(){\r\n\t\t$cmdPdf = \"pdftohtml -p -c -q -s \".$this->folderPath.$this->name.\"/\".$this->fileName;\r\n\t\techo $cmdPdf.\"<br>\";\r\n\t\techo shell_exec( $cmdPdf );\r\n\t}\r\n}\r\n\r\n//FOR MANUAL TESTS\r\n//$name = $_GET[\"name\"];\r\n//$x = new PdfToHtml($name);\r\n//echo $x->translateFromPresentation();\r\n//echo $x->translate();\r\n//$x->remove();\r\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/files/uploads/PdfToHtml.php b/files/uploads/PdfToHtml.php
--- a/files/uploads/PdfToHtml.php	(revision 4d9cdde94b5d9802696c5b2c1a1b312d3604ad42)
+++ b/files/uploads/PdfToHtml.php	(date 1611421004525)
@@ -23,7 +23,7 @@
 
     function translateFromPresentation(){
 
-	if( 
+/*	if( 
 	$this->extension == "ppt" ||
 	$this->extension == "pptx" ||
 	$this->extension == "odp" ||
@@ -52,7 +52,7 @@
 			echo 'Exception when calling ConvertDocumentApi->convertDocumentPptxToPdf: ', $e->getMessage(), PHP_EOL;
 		}
 	}
-
+*/
     }
 
 
